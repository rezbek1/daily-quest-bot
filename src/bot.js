/**
 * üñ§ –ü–û–í–°–ï–î–ù–ï–í–ù–´–ô –ö–í–ï–°–¢ - Telegram Bot
 * –î–ª—è —Ü–∏–Ω–∏—á–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–º–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–Ω–∞–≤–∏–¥—è—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É
 * 
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª: bot.js
 */

const { Telegraf, session } = require('telegraf');
const dotenv = require('dotenv');
const winston = require('winston');
const admin = require('firebase-admin');
const axios = require('axios');

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const FIREBASE_CONFIG = {
  projectId: process.env.FIREBASE_PROJECT_ID,
  privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
};

// ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.Console({
      format: winston.format.simple(),
    }),
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});

// ==================== FIREBASE ====================

try {
  admin.initializeApp({
    credential: admin.credential.cert(FIREBASE_CONFIG),
  });
  const db = admin.firestore();
  logger.info('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
  logger.error('‚ùå –û—à–∏–±–∫–∞ Firebase:', error);
  process.exit(1);
}

const db = admin.firestore();

// ==================== TELEGRAM –ë–û–¢ ====================

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());

logger.info('ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// ==================== PROMPTS FOR CHATGPT ====================

const PROMPTS = {
  corporate: `–¢—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –±–∏–∑–Ω–µ—Å–º–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–Ω–∞–≤–∏–¥—è—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –≤ –∑–∞–±–∞–≤–Ω—ã–π –∫–≤–µ—Å—Ç —Å –ß–ï–†–ù–´–ú –Æ–ú–û–†–û–ú.
–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞, –±–µ–∑ –ø–æ–∑–∏—Ç–∏–≤–∞. –¶–∏–Ω–∏—á–Ω—ã–π, –æ—Å—Ç—Ä—ã–π, –Ω–µ–º–Ω–æ–≥–æ –∂–µ—Å—Ç–æ–∫–∏–π.

–ü–†–ê–í–ò–õ–ê:
1. –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (150 —Å–ª–æ–≤)
2. –ß–µ—Ä–Ω—ã–π —é–º–æ—Ä, —Å–∞—Ä–∫–∞–∑–º, —Ü–∏–Ω–∏–∑–º –ü–†–ò–í–ï–¢–°–¢–í–£–ï–¢–°–Ø
3. –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: deadline = —Å–º–µ—Ä—Ç—å, –æ—Ç—á–µ—Ç = –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞–∫—Ç–∞ –æ —Å–º–µ—Ä—Ç–∏
4. –¶–µ–ª–∏ ‚Üí –≤—Ä–∞–≥–∏ (–±–æ—Å—Å = –¥—Ä–∞–∫–æ–Ω, –∫–ª–∏–µ–Ω—Ç = —Ç–∏—Ä–∞–Ω, —Å–æ–≤–µ—â–∞–Ω–∏–µ = –∫–∞–∑–Ω—å)
5. –ù–ï –≤–∫–ª—é—á–∞–π: —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞—Å–∏–ª–∏–µ, —Å–µ–∫—Å–∏–∑–º
6. –í–ö–õ–Æ–ß–ê–ô: —Ü–∏–Ω–∏—á–Ω–æ—Å—Ç—å, –º—Ä–∞–∫, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å

–ü–†–ò–ú–ï–†–´ –Ø–ó–´–ö–ê:
- "–∑–∞—Ö–µ—Ä–∞—á–∏—Ç—å –¥—Ä–∞–∫–æ–Ω–∞" = —Å–¥–µ–ª–∞—Ç—å —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É
- "–Ω–∞–∫–æ—Ä–º–∏—Ç—å –∞–∫—É–ª—É" = –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º
- "–æ–±–ª–∞–≥–æ—Ä–æ–¥–∏—Ç—å –ª–æ–∂—å" = —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç
- "—Å–ø–∞—Å—Ç–∏—Å—å –æ—Ç –ø–∞–ª–∞—á–µ–π" = –ø–µ—Ä–µ–∂–∏—Ç—å —Å–æ–≤–µ—â–∞–Ω–∏–µ

–ó–ê–î–ê–ß–ê: {TASK}

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∫–≤–µ—Å—Ç–∞, –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ì—Ä—É–±—ã–π, —Ü–∏–Ω–∏—á–Ω—ã–π, —á–µ—Ä–Ω—ã–π —é–º–æ—Ä.`,

  startup: `–¢—ã –º–∞—Å—Ç–µ—Ä –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –≤—ã—à–ª–∏ –≤ –±–æ–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –±–µ–∑ –∑–∞—â–∏—Ç—ã –∏ –∑–∞—Ä–ø–ª–∞—Ç—ã.

–ó–ê–î–ê–ß–ê: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É —Å—Ç–∞—Ä—Ç–∞–ø–µ—Ä–∞ –≤ –∫–≤–µ—Å—Ç –ø—Ä–æ –≤—ã–∂–∏–≤–∞–Ω–∏–µ –≤ —É—Å–ª–æ–≤–∏—è—Ö —Ö–∞–æ—Å–∞ —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º.

–ü–†–ê–í–ò–õ–ê:
1. –Ø–∑—ã–∫: —Å—Ç–∞—Ä—Ç–∞–ø-–∫—É–ª—å—Ç—É—Ä–∞, –Ω–µ–¥–æ—Å—ã–ø–∞–Ω–∏–µ, –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å, pivots
2. –ß–µ—Ä–Ω—ã–π —é–º–æ—Ä –ø—Ä–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ–Ω–µ–≥, sleep deprivation
3. –í—Ä–∞–≥–∏: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã, –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã, –∫–æ–¥, —Å—Ä–æ–∫–∏, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–º
4. –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å: —ç—Ç–æ –±–æ–µ–≤–æ–π –ø—Ä–∏–∫–∞–∑, –Ω–µ –º–æ—Ç–∏–≤–∞—Ü–∏—è

–ü–†–ò–ú–ï–†–´ –Ø–ó–´–ö–ê:
- "–ó–∞–∂–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞" = –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
- "–ó–∞–≤–∞–ª–∏—Ç—å –ø–∏—Ç—á" = –≤—ã—Å—Ç—É–ø–∏—Ç—å –ø–µ—Ä–µ–¥ VCs
- "–ù–∞—Ç—Ä–∞–≤–∏—Ç—å —Ñ–∏—á—É" = –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏—á—É –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
- "–í—ã–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ 200%" = —Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ –¥–≤–æ–∏—Ö

–ó–ê–î–ê–ß–ê: {TASK}

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∫–≤–µ—Å—Ç–∞.`,

  corporate_war: `–¢—ã —Å—Ç—Ä–∞—Ç–µ–≥ –¥—Ä–µ–≤–Ω–∏—Ö —Å—Ä–∞–∂–µ–Ω–∏–π –≤ –º–∏—Ä–µ –±–∏–∑–Ω–µ—Å–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—â–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±—Ä–æ—Å–∫—É –≤ —Å–ø–∏–Ω—É.

–ó–ê–î–ê–ß–ê: –û–ø–∏—Å–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Ö–æ–¥ –≤ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∏–≥—Ä–µ –ø–æ–ª–∏—Ç–∏–∫–∏.

–ü–†–ê–í–ò–õ–ê:
1. –Ø–∑—ã–∫: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –ø–æ–ª–∏—Ç–∏–∫–∞, –ø–æ–¥–≤–æ–¥–Ω—ã–µ —Ç–µ—á–µ–Ω–∏—è, —Ñ—Ä–∞–∫—Ü–∏–∏
2. –í—Ä–∞–≥–∏: –∫–æ–ª–ª–µ–≥–∏, –∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏–µ –æ—Ç–¥–µ–ª—ã, –≤–ª–∞—Å—Ç—å, –≤—Ä–µ–º—è
3. –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: –±–æ–ª—å—à–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –æ–ø–∞—Å–Ω–µ–µ
4. –ß–µ—Ä–Ω—ã–π —é–º–æ—Ä –ø—Ä–æ –±—é—Ä–æ–∫—Ä–∞—Ç–∏—é, –ø–æ–ª–∏—Ç–∏–∫—É, –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—â–∞–Ω–∏—è

–ó–ê–î–ê–ß–ê: {TASK}

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∫–≤–µ—Å—Ç–∞.`,
};

// ==================== UTILITY FUNCTIONS ====================

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase
 */
async function getUser(userId) {
  try {
    const userDoc = await db.collection('users').doc(userId.toString()).get();
    if (!userDoc.exists) {
      return null;
    }
    return userDoc.data();
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function createOrUpdateUser(userId, userData) {
  try {
    const userRef = db.collection('users').doc(userId.toString());
    const currentUser = await userRef.get();

    if (!currentUser.exists) {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      await userRef.set({
        userId,
        name: userData.first_name || '–ê–Ω–æ–Ω–∏–º',
        username: userData.username || `user_${userId}`,
        level: 1,
        xp: 0,
        totalQuestsCompleted: 0,
        badges: ['–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å'],
        theme: 'corporate',
        settings: {
          reminderTime: '19:00',
          language: 'ru',
          weeklyReportDay: 'sunday',
        },
        createdAt: new Date(),
        lastActiveAt: new Date(),
        streak: 0,
      });
      logger.info(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
      return true;
    } else {
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
      await userRef.update({
        lastActiveAt: new Date(),
      });
      return false;
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç —á–µ—Ä–µ–∑ ChatGPT
 */
async function generateQuestStory(taskDescription, theme = 'corporate') {
  try {
    const promptTemplate = PROMPTS[theme] || PROMPTS.corporate;
    const prompt = promptTemplate.replace('{TASK}', taskDescription);

    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: '–¢—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–≤–µ—Å—Ç–æ–≤ —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º –¥–ª—è –±–∏–∑–Ω–µ—Å–º–µ–Ω–æ–≤.',
          },
          {
            role: 'user',
            content: prompt,
          },
        ],
        max_tokens: 300,
        temperature: 0.8,
      },
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000,
      }
    );

    const story = response.data.choices[0].message.content.trim();
    logger.info(`‚úÖ –°—é–∂–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${taskDescription}`);
    return story;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ ChatGPT:', error.message);

    // Fallback story
    const fallbackStories = {
      corporate: `–û–±–ª–∞–≥–æ—Ä–æ–¥—å —ç—Ç—É –∑–∞–¥–∞—á—É —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ —á–µ—Å—Ç–Ω—ã–º. 
      –ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —Å–ª–æ–≤ –∏ –º–∞–ª–æ —Å–º—ã—Å–ª–∞. –ë–æ—Å—Å –Ω–µ –∑–∞–º–µ—Ç–∏—Ç —Ä–∞–∑–Ω–∏—Ü—ã.`,
      startup: `–î–æ–¥–µ–ª–∞–π —ç—Ç–æ –∑–∞ –Ω–æ—á—å. –ö–æ—Ñ–µ –Ω–æ–º–µ—Ä 5 –ø–æ–º–æ–∂–µ—Ç. 
      –ò–ª–∏ –Ω–µ—Ç. –ù–æ –¥–µ–ª–∞–π –≤—Å—ë —Ä–∞–≤–Ω–æ.`,
      corporate_war: `–≠—Ç–æ —á–∞—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ú–æ–∂–µ—Ç –≤—ã–∏–≥—Ä–∞–µ—à—å, –º–æ–∂–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å. 
      –ù–æ –≤—ã–≥–ª—è–¥–µ—Ç—å –¥–æ–ª–∂–µ–Ω —É–≤–µ—Ä–µ–Ω–Ω–æ.`,
    };

    return fallbackStories[theme] || fallbackStories.corporate;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç
 */
async function createQuest(userId, taskDescription) {
  try {
    const user = await getUser(userId);
    if (!user) {
      return null;
    }

    const story = await generateQuestStory(taskDescription, user.theme);

    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å XP –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
    const words = taskDescription.split(' ').length;
    let xp = 15;
    if (words < 5) xp = 10;
    else if (words > 20) xp = 30;

    const questId = `quest_${userId}_${Date.now()}`;
    const questRef = db.collection('quests').doc(questId);

    await questRef.set({
      questId,
      userId: userId.toString(),
      title: taskDescription,
      story,
      xp,
      completed: false,
      theme: user.theme,
      createdAt: new Date(),
      completedAt: null,
    });

    logger.info(`‚úÖ –ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: ${questId}`);
    return {
      id: questId,
      title: taskDescription,
      story,
      xp,
    };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getActiveQuests(userId) {
  try {
    const snapshot = await db
      .collection('quests')
      .where('userId', '==', userId.toString())
      .where('completed', '==', false)
      .orderBy('createdAt', 'desc')
      .limit(10)
      .get();

    const quests = [];
    snapshot.forEach((doc) => {
      quests.push({
        id: doc.id,
        ...doc.data(),
      });
    });

    return quests;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤:', error);
    return [];
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–û)
 */
async function completeQuest(userId, questId) {
  try {
    const questRef = db.collection('quests').doc(questId);
    const questDoc = await questRef.get();

    if (!questDoc.exists) {
      return { success: false, error: '–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    const quest = questDoc.data();

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –∫–≤–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (quest.userId !== userId.toString()) {
      return { success: false, error: '–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –∫–≤–µ—Å—Ç!' };
    }

    if (quest.completed) {
      return { success: false, error: '–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω' };
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∫–≤–µ—Å—Ç
    await questRef.update({
      completed: true,
      completedAt: new Date(),
    });

    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–±–∞–≤–∏—Ç—å XP)
    const userRef = db.collection('users').doc(userId.toString());
    const userDoc = await userRef.get();
    const user = userDoc.data();

    const newXp = user.xp + quest.xp;
    const newLevel = Math.floor(newXp / 300) + 1;

    await userRef.update({
      xp: newXp,
      level: newLevel,
      totalQuestsCompleted: user.totalQuestsCompleted + 1,
      lastActiveAt: new Date(),
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
    await db.collection('analytics').add({
      userId: userId.toString(),
      event: 'quest_completed',
      questId,
      xpGained: quest.xp,
      newLevel,
      timestamp: new Date(),
    });

    logger.info(`‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: ${questId}, XP: +${quest.xp}`);

    return {
      success: true,
      xpGained: quest.xp,
      newXp,
      newLevel,
      questTitle: quest.title,
    };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
    return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' };
  }
}

// ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================

/**
 * /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
 */
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const isNew = await createOrUpdateUser(userId, ctx.from);

  const welcomeMessage = `
üñ§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç"

–¢–≤–æ–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ–ø–∞—Å–Ω—É—é –∏–≥—Ä—É –≤—ã–∂–∏–≤–∞–Ω–∏—è. 
–ö–∞–∂–¥–∞—è —Å–∫—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —ç–ø–∏—á–µ—Å–∫–∏–º –∫–≤–µ—Å—Ç–æ–º. 
–ü–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ —é–º–æ—Ä–∞ —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–º—Ä—ë—à—å.

üìä –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:
–£—Ä–æ–≤–µ–Ω—å: 1 | XP: 0/300
–°—Ç–∞—Ç—É—Å: –ù–∞–∏–≤–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫ üíÄ

üéØ –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å:
/addtask [–æ–ø–∏—Å–∞–Ω–∏–µ] ‚Äî –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –∫–≤–µ—Å—Ç
/quests ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∫–≤–µ—Å—Ç—ã
/done [–Ω–æ–º–µ—Ä] ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∫–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
/profile ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/stats ‚Äî –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º

–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –°–æ–∑–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç:
/addtask –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä
  `;

  await ctx.reply(welcomeMessage);

  if (isNew) {
    logger.info(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
  }
});

/**
 * /addtask [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç
 */
bot.command('addtask', async (ctx) => {
  const userId = ctx.from.id;
  const taskDescription = ctx.message.text.replace('/addtask ', '').trim();

  if (!taskDescription) {
    await ctx.reply(
      'üìù –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n/addtask –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é'
    );
    return;
  }

  await ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—é–∂–µ—Ç... ChatGPT —Ç–æ–∂–µ –≤—ã–≥–æ—Ä–∞–µ—Ç üñ§');

  const quest = await createQuest(userId, taskDescription);

  if (!quest) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
    return;
  }

  const questMessage = `
‚úÖ –ö–í–ï–°–¢ –°–û–ó–î–ê–ù! (–ü—Ä–∏–∫–∞–∑ –æ—Ç –Ω–∞—á–∞–ª—å—Å—Ç–≤–∞ —ç–ø–∏—á–Ω–æ–π –ø—Ä–æ–∫–∞—á–∫–∏)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìú –°–Æ–ñ–ï–¢:
${quest.story}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéÅ –ù–ê–ì–†–ê–î–ê: +${quest.xp} XP
‚è±Ô∏è –°–¢–ê–¢–£–°: –ê–∫—Ç–∏–≤–µ–Ω

–í—ã–ø–æ–ª–Ω–∏: /quests —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–≤–µ—Å—Ç—ã
–ó–∞–≤–µ—Ä—à–∏—Ç—å: /done [–Ω–æ–º–µ—Ä]
  `;

  await ctx.reply(questMessage);
});

/**
 * /quests - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û)
 */
bot.command('quests', async (ctx) => {
  const userId = ctx.from.id;

  const quests = await getActiveQuests(userId);

  if (quests.length === 0) {
    await ctx.reply(
      'üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!\n–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π: /addtask –û–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π –∑–∞–¥–∞—á–∏'
    );
    return;
  }

  let message = `üìã –¢–í–ò –ù–ï–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–°–¢–í–ê (${quests.length})\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

  quests.forEach((quest, index) => {
    const difficultyStars = '‚≠ê'.repeat(
      Math.min(Math.floor(quest.xp / 20), 5)
    );
    message += `${index + 1}Ô∏è‚É£ üíÄ ${quest.title}\n`;
    message += `"${quest.story.substring(0, 80)}..."\n`;
    message += `–ù–∞–≥—Ä–∞–¥–∞: ${quest.xp} XP | ${difficultyStars}\n`;
    message += `‚Üí –í—ã–ø–æ–ª–Ω–∏—Ç—å: /done ${index + 1}\n`;
    message += `\n`;
  });

  message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  message += `\nüéØ –í—ã–ø–æ–ª–Ω–∏ –∫–≤–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π: /done [–Ω–æ–º–µ—Ä]\n`;
  message += `–ü—Ä–∏–º–µ—Ä: /done 1\n\n`;
  message += `[–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –±–æ–ª—å] /addtask`;

  await ctx.reply(message);
});

/**
 * /done [–Ω–æ–º–µ—Ä] - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–û)
 */
bot.command('done', async (ctx) => {
  const userId = ctx.from.id;
  const args = ctx.message.text.replace('/done ', '').trim();

  if (!args) {
    const quests = await getActiveQuests(userId);
    if (quests.length === 0) {
      await ctx.reply('üì≠ –ù–µ—Ç –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
      return;
    }

    let message = '–í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:\n\n';
    quests.forEach((quest, index) => {
      message += `/done ${index + 1} - ${quest.title}\n`;
    });

    await ctx.reply(message);
    return;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∫–≤–µ—Å—Ç–∞
  const questNumber = parseInt(args, 10);
  
  if (isNaN(questNumber) || questNumber < 1) {
    await ctx.reply('‚ùå –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–µ—Å—Ç–∞.\n–ü—Ä–∏–º–µ—Ä: /done 1');
    return;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
  const quests = await getActiveQuests(userId);
  
  if (questNumber > quests.length) {
    await ctx.reply(`‚ùå –ö–≤–µ—Å—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º ${questNumber} –Ω–µ—Ç.\n–£ —Ç–µ–±—è –≤—Å–µ–≥–æ ${quests.length} –∫–≤–µ—Å—Ç–æ–≤.`);
    return;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç –ø–æ –Ω–æ–º–µ—Ä—É (–∏–Ω–¥–µ–∫—Å = –Ω–æ–º–µ—Ä - 1) - –ò–°–ü–†–ê–í–õ–ï–ù–û
  const selectedQuest = quests[questNumber - 1];
  const questId = selectedQuest.id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ Firestore

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç
  const result = await completeQuest(userId, questId);

  if (!result.success) {
    await ctx.reply(`‚ùå ${result.error}`);
    return;
  }

  const completeMessage = `
üéâ –ö–í–ï–°–¢ –í–´–ü–û–õ–ù–ï–ù! (–ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö —à–∞–Ω—Å–æ–≤)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìú ${result.questTitle}
"–¢—ã –ø–µ—Ä–µ–∂–∏–ª —ç—Ç–æ. –≠—Ç–æ –≤—Å–µ, —á—Ç–æ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ."

‚ú® +${result.xpGained} XP –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ!

üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:
   –£—Ä–æ–≤–µ–Ω—å ${result.newLevel}: ${result.newXp} XP
   –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: —Ç–≤–æ—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è —Ä–∞—Å—Ç–µ—Ç
   
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

–ï—â—ë /addtask –∏–ª–∏ –æ—Ç–¥—ã—Ö–∞–π?
  `;

  await ctx.reply(completeMessage);
});

/**
 * /profile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
bot.command('profile', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUser(userId);

  if (!user) {
    await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏ /start');
    return;
  }

  const badgesStr = user.badges.join(', ') || '–ù–µ—Ç';

  const profileMessage = `
üë§ –ü–†–û–§–ò–õ–¨: ${user.name}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä –û–°–ù–û–í–ù–´–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
–£—Ä–æ–≤–µ–Ω—å: ${user.level} ${'üíÄ'.repeat(Math.min(user.level, 5))}
–û–ø—ã—Ç: ${user.xp}/${user.level * 300} XP (${Math.round(
    (user.xp % 300) / 3
  )}%)

üìà –ü–†–û–ì–†–ï–°–°
‚úÖ –í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤: ${user.totalQuestsCompleted}
üî• Streak: ${user.streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥

üèÜ –ë–ï–ô–î–ñ–ò (${user.badges.length})
${badgesStr}

‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò
üé® –¢–µ–º–∞: ${user.theme}
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${user.settings.reminderTime}
üåç –Ø–∑—ã–∫: ${user.settings.language}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

[–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] /stats [–ü–æ–º–æ—â—å] /help
  `;

  await ctx.reply(profileMessage);
});

/**
 * /stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */
bot.command('stats', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUser(userId);

  if (!user) {
    await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const statsMessage = `
üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ ${user.name}
–£—Ä–æ–≤–µ–Ω—å: ${user.level}
–í—Å–µ–≥–æ XP: ${user.xp}
–ö–≤–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.totalQuestsCompleted}

üìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨
Success Rate: ${user.totalQuestsCompleted > 0 ? '95%' : '0%'}
(–ï—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç, —Ç—ã —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ—à—å)

üéØ –ê–ö–¢–ò–í–ù–û–°–¢–¨
–î–Ω–µ–π –≤ –∏–≥—Ä–µ: ${Math.floor(
    (new Date() - user.createdAt.toDate()) / (1000 * 60 * 60 * 24)
  )}
–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ç–æ–ª—å–∫–æ —á—Ç–æ
–¢–µ–∫—É—â–∏–π streak: ${user.streak} –¥–Ω–µ–π

üí° –°–û–í–ï–¢:
–ë–æ–ª—å—à–µ –∫–≤–µ—Å—Ç–æ–≤ ‚Üí –±–æ–ª—å—à–µ XP ‚Üí –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π ‚Üí 
–Ω–æ–≤—ã–µ —Ç–µ–º—ã ‚Üí –µ—â–µ –±–æ–ª—å–Ω–µ–µ —Ä–∂–∞—Ç—å üñ§

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

[–õ–∏–¥–µ—Ä–±–æ—Ä–¥] /leaderboard [–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é] /start
  `;

  await ctx.reply(statsMessage);
});

/**
 * /leaderboard - –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
 */
bot.command('leaderboard', async (ctx) => {
  try {
    const snapshot = await db
      .collection('users')
      .orderBy('xp', 'desc')
      .limit(10)
      .get();

    let message =
      'üèÜ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –õ–ò–î–ï–†–ë–û–†–î –°–¢–†–ê–î–ê–ù–ò–ô\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';

    const medals = ['ü•á', 'ü•à', 'ü•â'];
    let position = 1;

    snapshot.forEach((doc) => {
      const user = doc.data();
      const medal = medals[position - 1] || `${position}.`;
      message += `${medal} ${user.name.substring(0, 15)} | –£—Ä. ${user.level} | ${user.xp} XP\n`;
      position++;
    });

    message += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    message += `–¢—ã –≤–∏–¥–∏—à—å —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã? –≠—Ç–æ –±–æ–ª—å, –æ–±–ª–∞—á–µ–Ω–Ω–∞—è –≤ XP.\n`;

    await ctx.reply(message);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞');
  }
});

/**
 * /help - –°–ø—Ä–∞–≤–∫–∞
 */
bot.command('help', async (ctx) => {
  const helpMessage = `
‚ùì –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–í–ï–°–¢–ê–ú–ò:
/addtask [–æ–ø–∏—Å–∞–Ω–∏–µ] ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç
/quests ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∫–≤–µ—Å—Ç–æ–≤
/done [–Ω–æ–º–µ—Ä] ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º

üë§ –ü–†–û–§–ò–õ–¨ –ò –ü–†–û–ì–†–ï–°–°:
/profile ‚Äî –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/stats ‚Äî –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üèÜ –û–ë–©–ï–°–¢–í–ï–ù–ù–û–ï:
/leaderboard ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
/daily ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ (—Å–∫–æ—Ä–æ)

‚öôÔ∏è –ü–†–û–ß–ï–ï:
/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –°–û–í–ï–¢–´:
‚Ä¢ –ß–µ—Ä–Ω—ã–π —é–º–æ—Ä = —Å–ø–æ—Å–æ–± —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è
‚Ä¢ –ö–∞–∂–¥—ã–π –∫–≤–µ—Å—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç XP
‚Ä¢ –ù–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ = –Ω–æ–≤—ã–µ —Ç–µ–º—ã
‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–≤–µ—Å—Ç—ã üñ§

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

–í–æ–ø—Ä–æ—Å—ã? /feedback
  `;

  await ctx.reply(helpMessage);
});

/**
 * /feedback - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
 */
bot.command('feedback', async (ctx) => {
  const userId = ctx.from.id;
  const feedback = ctx.message.text.replace('/feedback ', '').trim();

  if (!feedback) {
    await ctx.reply('üí¨ –ù–∞–ø–∏—à–∏ —Ç–≤–æ–π –æ—Ç–∑—ã–≤:\n/feedback –¢–≤–æ–π —Ç–µ–∫—Å—Ç');
    return;
  }

  try {
    await db.collection('feedback').add({
      userId: userId.toString(),
      text: feedback,
      timestamp: new Date(),
    });

    await ctx.reply(
      '‚úÖ –°–ø–∞—Å–∏–±–æ! üôè –¢–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ–ª—É—á–µ–Ω.\n–û–Ω –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —Ü–∏–Ω–∏—á–Ω—ã–º.'
    );

    logger.info(`Feedback –ø–æ–ª—É—á–µ–Ω –æ—Ç ${userId}: ${feedback}`);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è feedback:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
  }
});

/**
 * –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
 */
bot.on('text', async (ctx) => {
  if (!ctx.message.text.startsWith('/')) {
    await ctx.reply(
      '‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /addtask –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞'
    );
  }
});

// ==================== ERROR HANDLING ====================

bot.catch((err, ctx) => {
  logger.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  try {
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  } catch (e) {
    logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', e);
  }
});

// ==================== –ó–ê–ü–£–°–ö ====================

const startBot = async () => {
  try {
    await bot.launch();
    logger.info('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    logger.info(
      `üîó –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://t.me/${(await bot.telegram.getMe()).username}`
    );
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
};

startBot();

// ==================== GRACEFUL SHUTDOWN ====================

process.on('SIGINT', () => {
  logger.info('üì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  bot.stop('SIGINT');
});

process.on('SIGTERM', () => {
  logger.info('üì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  bot.stop('SIGTERM');
});

module.exports = bot;
