/**
 * üñ§ –ü–û–í–°–ï–î–ù–ï–í–ù–´–ô –ö–í–ï–°–¢ - Telegram Bot
 * –î–ª—è —Ü–∏–Ω–∏—á–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–º–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–Ω–∞–≤–∏–¥—è—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É
 * 
 * –í–µ—Ä—Å–∏—è: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –í–ò–î–ù–û –í–ï–ó–î–ï —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
 */

const { Telegraf, session, Markup } = require('telegraf');
const dotenv = require('dotenv');
const winston = require('winston');
const admin = require('firebase-admin');
const axios = require('axios');
const cron = require('node-cron');
const moment = require('moment-timezone');

dotenv.config();

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const FIREBASE_CONFIG = {
  projectId: process.env.FIREBASE_PROJECT_ID,
  privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
};

// ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.Console({ format: winston.format.simple() }),
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});

// ==================== FIREBASE ====================

try {
  admin.initializeApp({
    credential: admin.credential.cert(FIREBASE_CONFIG),
  });
} catch (error) {
  logger.error('‚ùå –û—à–∏–±–∫–∞ Firebase:', error);
  process.exit(1);
}

const db = admin.firestore();
logger.info('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// ==================== TELEGRAM –ë–û–¢ ====================

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());
logger.info('ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// ==================== –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ====================

/**
 * –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
async function sendReminders() {
  try {
    logger.info('üîç –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô');
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersSnapshot = await db.collection('users').get();
    logger.info(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersSnapshot.docs.length}`);
    
    for (const userDoc of usersSnapshot.docs) {
      const user = userDoc.data();
      const reminderTime = user.settings?.reminderTime;
      const timezone = user.settings?.timezone || 'Europe/Moscow';
      
      logger.info(`üë§ –ü—Ä–æ–≤–µ—Ä—è—é ${user.name}: –≤—Ä–µ–º—è ${reminderTime}, –∑–æ–Ω–∞ ${timezone}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      if (!reminderTime) {
        logger.info(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é ${user.name}: –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`);
        continue;
      }
      
      // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userNow = moment().tz(timezone);
      const userHour = String(userNow.hours()).padStart(2, '0');
      const userMinute = String(userNow.minutes()).padStart(2, '0');
      const [reminderHour] = reminderTime.split(':');
      
      logger.info(`‚è∞ ${user.name}: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ${userHour}:${userMinute}, –æ–∂–∏–¥–∞–µ—Ç—Å—è ${reminderHour}:xx`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —á–∞—Å
      if (reminderHour !== userHour) {
        logger.info(`‚ùå ${user.name}: —á–∞—Å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (${reminderHour} !== ${userHour})`);
        continue;
      }
      
      logger.info(`‚úÖ ${user.name}: —á–∞—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã...`);
      
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–ª–æ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
      const activeQuests = await getActiveQuests(user.userId || userDoc.id);
      logger.info(`üìã ${user.name}: –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤: ${activeQuests?.length || 0}`);
      
      if (activeQuests && activeQuests.length > 0) {
        // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        try {
          const userCurrentTime = userNow.format('HH:mm');
          
          const reminderMessage = `üîî –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ö–í–ï–°–¢–ê–•

‚è∞ –í—Ä–µ–º—è: ${userCurrentTime} (${timezone})
üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤: ${activeQuests.length}

–í–æ—Ç —á—Ç–æ –∂–¥—ë—Ç:
${activeQuests.slice(0, 3).map((q, i) => `${i + 1}. ${q.title}`).join('\n')}
${activeQuests.length > 3 ? `\n... –∏ –µ—â—ë ${activeQuests.length - 3}` : ''}

‚û°Ô∏è –î–∞–≤–∞–π, –≤—ã–ø–æ–ª–Ω—è—Ç—å! /quests`;
          
          await bot.telegram.sendMessage(user.userId || userDoc.id, reminderMessage);
          logger.info(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${user.name} –≤ ${userCurrentTime} (${timezone})`);
        } catch (error) {
          logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${user.name}: ${error.message}`);
        }
      } else {
        logger.info(`‚è≠Ô∏è ${user.name}: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤`);
      }
    }
    
    logger.info('‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê');
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å cron
 */
function startReminderScheduler() {
  try {
    logger.info('üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–Æ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö...');
    
    // –ó–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—è—Å–∞—Ö)
    const job = cron.schedule('* * * * *', async () => {
      await sendReminders();
    });
    
    logger.info('‚úÖ‚úÖ‚úÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù ‚úÖ‚úÖ‚úÖ');
    logger.info('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞');
    
    return job;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error);
  }
}

// ==================== PROMPTS FOR CHATGPT ====================

const PROMPTS = {
  light: `–¢—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–±–∞–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞–¥–µ–∂–¥—É.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á—É –≤ –≤–µ—Å—ë–ª—ã–π –∫–≤–µ—Å—Ç —Å –ª—ë–≥–∫–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º.
–Æ–º–æ—Ä –º—è–≥–∫–∏–π, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –Ω–æ –≤—Å—ë –µ—â—ë —Ü–∏–Ω–∏—á–Ω—ã–π.

–ü–†–ê–í–ò–õ–ê:
1. –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (150 —Å–ª–æ–≤)
2. –õ—ë–≥–∫–∏–π —é–º–æ—Ä, —à—É—Ç–∫–∏, –Ω–∞–º–µ–∫–∏ –Ω–∞ –±–æ–ª—å (–Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –∂—ë—Å—Ç–∫–∏–µ)
3. –Ø–∑—ã–∫: –≤–µ—Å—ë–ª—ã–π, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π
4. –í—Ä–∞–≥–∏: —Å–ª–æ–∂–Ω—ã–µ, –Ω–æ –ø—Ä–µ–æ–¥–æ–ª–∏–º—ã–µ
5. –ù–ï –≤–∫–ª—é—á–∞–π: —á—ë—Ä–Ω—ã–π —é–º–æ—Ä, –∂—ë—Å—Ç–∫–æ—Å—Ç—å, –æ—Ç—á–∞—è–Ω–∏–µ
6. –í–ö–õ–Æ–ß–ê–ô: –æ–ø—Ç–∏–º–∏–∑–º, –∑–∞–±–∞–≤—É, –ª—ë–≥–∫–æ—Å—Ç—å

–ó–ê–î–ê–ß–ê: {TASK}

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∫–≤–µ—Å—Ç–∞, –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –°–º–µ—à–Ω–æ–π, –Ω–æ –¥–æ–±—Ä—ã–π —é–º–æ—Ä.`,

  black: `–¢—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—é—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á—É –≤ –∫–≤–µ—Å—Ç —Å –ß–Å–†–ù–´–ú –Æ–ú–û–†–û–ú.
–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞, –±–µ–∑ –ø–æ–∑–∏—Ç–∏–≤–∞. –¶–∏–Ω–∏—á–Ω—ã–π, –æ—Å—Ç—Ä—ã–π, —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π.

–ü–†–ê–í–ò–õ–ê:
1. –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (150 —Å–ª–æ–≤)
2. –ß—ë—Ä–Ω—ã–π —é–º–æ—Ä, —Å–∞—Ä–∫–∞–∑–º, —Ü–∏–Ω–∏–∑–º –ü–†–ò–í–ï–¢–°–¢–í–£–ï–¢–°–Ø
3. –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: deadline = —Å–º–µ—Ä—Ç—å, –∫–ª–∏–µ–Ω—Ç = –≤—Ä–∞–≥, —Å–æ–≤–µ—â–∞–Ω–∏–µ = –∫–∞–∑–Ω—å
4. –í—Ä–∞–≥–∏: –Ω–∞—á–∞–ª—å–Ω–∏–∫, –∫–ª–∏–µ–Ω—Ç—ã, —Å—Ä–æ–∫–∏, –∫–æ–ª–ª–µ–≥–∏, —Ç–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º
5. –ù–ï –≤–∫–ª—é—á–∞–π: —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞—Å–∏–ª–∏–µ, —Å–µ–∫—Å–∏–∑–º
6. –í–ö–õ–Æ–ß–ê–ô: —Ü–∏–Ω–∏—á–Ω–æ—Å—Ç—å, –º—Ä–∞–∫, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å

–ó–ê–î–ê–ß–ê: {TASK}

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∫–≤–µ—Å—Ç–∞, –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ñ–µ—Å—Ç–∫–∏–π —á—ë—Ä–Ω—ã–π —é–º–æ—Ä.`,

  venture: `–¢—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä –ø–æ—Å–ª–µ –ø—Ä–æ–≤–∞–ª–∞ –ø–∏—Ç—á–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç —Å –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–º –æ –µ–≥–æ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –û–ø–∏—Å–∞—Ç—å –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á—É –∫–∞–∫ —Å—É—Ä–æ–≤—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –≤–µ–Ω—á—É—Ä–Ω–æ–≥–æ –¥–Ω–∞.
–ú–ê–ö–°–ò–ú–£–ú –±–æ–ª–∏, —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –±–µ—Å–ø–æ—â–∞–¥–Ω–æ—Å—Ç–∏. –≠—Ç–æ –º–æ—Ç–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ö.

–ü–†–ê–í–ò–õ–ê:
1. –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (150 —Å–ª–æ–≤)
2. –ú–ê–ö–°–ò–ú–£–ú —Å–∞—Ä–∫–∞–∑–º–∞, —á—ë—Ä–Ω–æ–≥–æ —é–º–æ—Ä–∞ –∏ –∂—ë—Å—Ç–∫–æ—Å—Ç–∏
3. –Ø–∑—ã–∫: –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç–µ—Ä—è–ª —Ç–µ—Ä–ø–µ–Ω–∏–µ
4. –í—Ä–∞–≥–∏: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –Ω–∞ \$200M, –≤—Ä–µ–º—è, –¥–µ–Ω—å–≥–∏, —Ç–≤–æ—è –ª–µ–Ω—å, —Ç–≤–æ–π —Å—Ç—Ä–∞—Ö
5. –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: –æ—à–∏–±–∫–∞ = –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ, –º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = —Å–º–µ—Ä—Ç—å, –Ω–µ—É–¥–∞—á–∞ = –ø–æ–∑–æ—Ä
6. –í–ö–õ–Æ–ß–ê–ô: –±–æ–ª—å, –æ—Ç—á–∞—è–Ω–∏–µ, —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å, –º–æ—Ç–∏–≤–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ö

–ó–ê–î–ê–ß–ê: {TASK}

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∫–≤–µ—Å—Ç–∞, –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ë–µ—Å–ø–æ—â–∞–¥–Ω–æ —á–µ—Å—Ç–Ω—ã–π –∫–≤–µ—Å—Ç.`,

  quote: `–¢—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ—Å—Ç—Ä–æ—É–º–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—é—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –û–î–ù–£ –∫–æ—Ä–æ—Ç–∫—É—é, —è–∑–≤–∏—Ç–µ–ª—å–Ω—É—é —Ü–∏—Ç–∞—Ç—É –ø—Ä–æ –∂–∏–∑–Ω—å –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è.
–ú–∞–∫—Å–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏. –Ø–∑—ã–∫: —á—ë—Ä–Ω—ã–π —é–º–æ—Ä, —Ü–∏–Ω–∏—á–Ω—ã–π, –±–µ—Å–ø–æ—â–∞–¥–Ω–æ —á–µ—Å—Ç–Ω—ã–π.

–ü–†–ò–ú–ï–†–´ –°–¢–ò–õ–Ø:
- "KPI –Ω–µ –≤—Ä—É—Ç. –í—Ä—ë—à—å —Ç—ã."
- "–£—Å–ø–µ—à–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å - —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –Ω–∞—É—á–∏–ª—Å—è —Å–∫—Ä—ã–≤–∞—Ç—å –ø–∞–Ω–∏–∫—É"
- "–°—Ç–∞—Ä—Ç–∞–ø - —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –ø–ª–∞—Ç–∏—à—å –¥–µ–Ω—å–≥–∏, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å 24/7"
- "–ò–Ω–≤–µ—Å—Ç–æ—Ä —Å–ø—Ä–æ—Å–∏—Ç '–ì–¥–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?' –û—Ç–≤–µ—Ç: '–î–µ–Ω–µ–≥ –Ω–µ—Ç, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –µ—Å—Ç—å'"
- "–î–µ–¥–ª–∞–π–Ω - —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –æ—à–∏–±—Å—è –≤ –≤—ã–±–æ—Ä–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"
- "–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω - —ç—Ç–æ –∫—Ä–∞—Å–∏–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã –ø–æ—Ç–µ—Ä—è–µ—à—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏"

–ü–†–ê–í–ò–õ–ê:
1. –û–î–ù–ê —Ü–∏—Ç–∞—Ç–∞, –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏
2. –ú–∞–∫—Å–∏–º—É–º —Å–∞—Ä–∫–∞–∑–º–∞ –∏ —á—ë—Ä–Ω–æ–≥–æ —é–º–æ—Ä–∞
3. –ü—Ä–æ –±–∏–∑–Ω–µ—Å, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ, —Å—Ç–∞—Ä—Ç–∞–ø—ã, –¥–µ–Ω—å–≥–∏, –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
4. –ë–µ—Å–ø–æ—â–∞–¥–Ω–æ —á–µ—Å—Ç–Ω–æ
5. –ù–ï –≤–∫–ª—é—á–∞–π: –ø–æ–ª–∏—Ç–∏–∫—É, —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞—Å–∏–ª–∏–µ, —Å–µ–∫—Å–∏–∑–º

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ü–∏—Ç–∞—Ç—É, –ë–ï–ó –∫–∞–≤—ã—á–µ–∫, –ë–ï–ó –∞–≤—Ç–æ—Ä–∞, –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`,
};


// ==================== UTILITY FUNCTIONS ====================

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
 */
async function migrateUserData(userId) {
  try {
    const userRef = db.collection('users').doc(userId.toString());
    const userDoc = await userRef.get();
    
    if (!userDoc.exists) return;
    
    const user = userDoc.data();
    const updates = {};
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å activityLog
    if (!user.activityLog) {
      updates.activityLog = [];
      logger.info(`üìã –î–æ–±–∞–≤–ª–µ–Ω activityLog –¥–ª—è ${userId}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å streak
    if (user.streak === undefined || user.streak === null || user.streak === 0) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–≤–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ - –Ω–∞—á–∞—Ç—å streak —Å 1
      if (user.totalQuestsCompleted > 0) {
        updates.streak = 1;
      } else {
        updates.streak = 0;
      }
      logger.info(`üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω streak –¥–ª—è ${userId}: ${updates.streak}`);
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö
    if (Object.keys(updates).length > 0) {
      await userRef.update(updates);
      logger.info(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${userId}`, updates);
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π
 */
async function getUser(userId) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await migrateUserData(userId);
    
    // –ü–æ—Ç–æ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userDoc = await db.collection('users').doc(userId.toString()).get();
    return userDoc.exists ? userDoc.data() : null;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

async function createOrUpdateUser(userId, userData) {
  try {
    const userRef = db.collection('users').doc(userId.toString());
    const currentUser = await userRef.get();

    if (!currentUser.exists) {
      await userRef.set({
        userId,
        name: userData.first_name || '–ê–Ω–æ–Ω–∏–º',
        username: userData.username || `user_${userId}`,
        level: 1,
        xp: 0,
        totalQuestsCompleted: 0,
        badges: ['–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å'],
        theme: 'black',
        settings: { reminderTime: '19:00', language: 'ru', weeklyReportDay: 'sunday', timezone: 'Europe/Moscow' },
        createdAt: new Date(),
        lastActiveAt: new Date(),
        streak: 1,
        activityLog: [{
          date: new Date().toDateString(),
          questsCompleted: 0,
          xpGained: 0,
          timestamp: new Date()
        }],
      });
      logger.info(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
      return true;
    } else {
      await userRef.update({ lastActiveAt: new Date() });
      return false;
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å streak –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function updateStreak(userId) {
  try {
    const userRef = db.collection('users').doc(userId.toString());
    const userDoc = await userRef.get();
    const user = userDoc.data();
    
    if (!user) return;
    
    const today = new Date().toDateString();
    const lastActive = user.lastActiveAt?.toDate?.()?.toDateString?.();
    
    let newStreak = user.streak || 1;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if (lastActive !== today) {
      const yesterday = new Date(Date.now() - 86400000).toDateString();
      
      if (lastActive === yesterday) {
        // –í—á–µ—Ä–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–µ—Ä–∏—é
        newStreak = (user.streak || 1) + 1;
      } else {
        // –ë—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        newStreak = 1;
      }
    }
    
    await userRef.update({
      streak: newStreak,
      lastActiveAt: new Date()
    });
    
    logger.info(`‚úÖ Streak –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${userId}: ${newStreak} –¥–Ω–µ–π`);
    return newStreak;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è streak:', error);
  }
}

async function generateQuestStory(taskDescription, theme = 'corporate') {
  try {
    const promptTemplate = PROMPTS[theme] || PROMPTS.corporate;
    const prompt = promptTemplate.replace('{TASK}', taskDescription);

    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: '–¢—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–≤–µ—Å—Ç–æ–≤ —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º.' },
          { role: 'user', content: prompt },
        ],
        max_tokens: 300,
        temperature: 0.8,
      },
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000,
      }
    );

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ ChatGPT:', error.message);
    return '–û–±–ª–∞–≥–æ—Ä–æ–¥—å —ç—Ç—É –∑–∞–¥–∞—á—É —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ —á–µ—Å—Ç–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —Å–ª–æ–≤ –∏ –º–∞–ª–æ —Å–º—ã—Å–ª–∞.';
  }
}



async function generateDailyQuote() {
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: '–¢—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π.' },
          { role: 'user', content: PROMPTS.quote },
        ],
        max_tokens: 100,
        temperature: 0.9,
      },
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000,
      }
    );

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', error.message);
    const fallbackQuotes = [
      'KPI –Ω–µ –≤—Ä—É—Ç. –í—Ä—ë—à—å —Ç—ã.',
      '–£—Å–ø–µ—à–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å - —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –Ω–∞—É—á–∏–ª—Å—è —Å–∫—Ä—ã–≤–∞—Ç—å –ø–∞–Ω–∏–∫—É.',
      '–°—Ç–∞—Ä—Ç–∞–ø - —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –ø–ª–∞—Ç–∏—à—å –¥–µ–Ω—å–≥–∏, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å 24/7.',
      '–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω - —ç—Ç–æ –∫—Ä–∞—Å–∏–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã –ø–æ—Ç–µ—Ä—è–µ—à—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏.',
      '–î–µ–¥–ª–∞–π–Ω - —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –æ—à–∏–±—Å—è –≤ –≤—ã–±–æ—Ä–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.',
    ];
    return fallbackQuotes[Math.floor(Math.random() * fallbackQuotes.length)];
  }
}

async function createQuest(userId, taskDescription) {
  try {
    const user = await getUser(userId);
    if (!user) return null;

    const story = await generateQuestStory(taskDescription, user.theme);
    const words = taskDescription.split(' ').length;
    let xp = 15;
    if (words < 5) xp = 10;
    else if (words > 20) xp = 30;

    const userQuestsSnapshot = await db.collection('quests').where('userId', '==', userId.toString()).get();
    const activeQuests = userQuestsSnapshot.docs.filter(doc => !doc.data().completed);
    const questNumber = activeQuests.length + 1;

    const questId = `quest_${userId}_${Date.now()}`;
    await db.collection('quests').doc(questId).set({
      questId, userId: userId.toString(), questNumber, title: taskDescription,
      story, xp, completed: false, theme: user.theme, createdAt: new Date(), completedAt: null,
    });

    logger.info(`‚úÖ –ö–≤–µ—Å—Ç #${questNumber} —Å–æ–∑–¥–∞–Ω: ${questId}`);
    return { id: questId, title: taskDescription, story, xp, questNumber };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
    return null;
  }
}

async function getActiveQuests(userId) {
  try {
    const snapshot = await db.collection('quests').where('userId', '==', userId.toString()).get();
    const quests = [];
    snapshot.forEach((doc) => {
      const quest = doc.data();
      if (!quest.completed) quests.push({ id: doc.id, ...quest });
    });
    quests.sort((a, b) => b.createdAt.toDate() - a.createdAt.toDate());
    return quests;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤:', error);
    return [];
  }
}

async function getTodayQuests(userId) {
  const allQuests = await getActiveQuests(userId);
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  return allQuests.filter(quest => {
    const createdDate = quest.createdAt.toDate();
    return createdDate >= today && createdDate < tomorrow;
  });
}

async function completeQuest(userId, questId) {
  try {
    const questRef = db.collection('quests').doc(questId);
    const questDoc = await questRef.get();

    if (!questDoc.exists) return { success: false, error: '–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' };

    const quest = questDoc.data();
    if (quest.userId !== userId.toString()) return { success: false, error: '–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –∫–≤–µ—Å—Ç!' };
    if (quest.completed) return { success: false, error: '–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω' };

    await questRef.update({ completed: true, completedAt: new Date() });

    const userRef = db.collection('users').doc(userId.toString());
    const userDoc = await userRef.get();
    const user = userDoc.data();

    const newXp = user.xp + quest.xp;
    const newLevel = Math.floor(newXp / 300) + 1;
    
    // –û–±–Ω–æ–≤–∏—Ç—å streak
    const newStreak = await updateStreak(userId);
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å activityLog
    const today = new Date().toDateString();
    const activityLog = user.activityLog || [];
    const todayLog = activityLog.find(log => log.date === today);
    
    if (todayLog) {
      todayLog.questsCompleted += 1;
      todayLog.xpGained += quest.xp;
      todayLog.quests = todayLog.quests || [];
      todayLog.quests.push(quest.title);
    } else {
      activityLog.push({
        date: today,
        questsCompleted: 1,
        xpGained: quest.xp,
        quests: [quest.title],
        timestamp: new Date()
      });
    }

    await userRef.update({
      xp: newXp, 
      level: newLevel, 
      totalQuestsCompleted: user.totalQuestsCompleted + 1,
      streak: newStreak,
      lastActiveAt: new Date(),
      activityLog: activityLog
    });

    await db.collection('analytics').add({
      userId: userId.toString(), event: 'quest_completed', questId,
      xpGained: quest.xp, newLevel, timestamp: new Date(),
    });

    logger.info(`‚úÖ –ö–≤–µ—Å—Ç #${quest.questNumber} –≤—ã–ø–æ–ª–Ω–µ–Ω: ${questId}, XP: +${quest.xp}, Streak: ${newStreak}`);
    return {
      success: true, xpGained: quest.xp, newXp, newLevel, newStreak,
      questNumber: quest.questNumber, questTitle: quest.title,
    };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
    return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' };
  }
}

/**
 * –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –° INLINE –ö–ù–û–ü–ö–ê–ú–ò
 */
function getMainMenuKeyboard() {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å', 'menu_add'),
      Markup.button.callback('üìã –ö–≤–µ—Å—Ç—ã', 'menu_quests'),
      Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'menu_profile'),
    ],
    [
      Markup.button.callback('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'menu_stats'),
      Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥', 'menu_leaderboard'),
      Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'menu_help'),
    ],
    [
      Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'menu_settings'),
      Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'menu_home'),
    ],
  ]);
}


// ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================

/**
 * /start
 */
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  await createOrUpdateUser(userId, ctx.from);


  const welcomeMessage = `üñ§ TELEGRAM-–ë–û–¢ –í–´–ñ–ò–í–ê–ù–ò–Ø –î–õ–Ø –ü–†–ï–î–ü–†–ò–ù–ò–ú–ê–¢–ï–õ–Ø

Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫—É—é —Ä—É—Ç–∏–Ω—É –≤ —á–µ—Ä–Ω—É—é –∫–æ–º–µ–¥–∏—é.

–¢—ã —Å—Ç—Ä–æ–∏—à—å –±–∏–∑–Ω–µ—Å, –∞ –æ—â—É—â–∞–µ—à—å, —á—Ç–æ —Å—Ç—Ä–æ–∏—à—å —Å–µ–±–µ –Ω–µ—Ä–≤–Ω—ã–π —Å—Ä—ã–≤? 
–ë–æ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É, –∑–≤–æ–Ω–æ–∫ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤ –∫–≤–µ—Å—Ç –≤—ã–∂–∏–≤–∞–Ω–∏—è —Å —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–º —Å–∞—Ä–∫–∞–∑–º–æ–º. 
–¢–µ–ø–µ—Ä—å KPI –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã ‚Äî —ç—Ç–æ –±–æ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø–æ–±–µ–¥–∏—Ç—å.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ –ß–¢–û –¢–´ –ü–û–õ–£–ß–ê–ï–®–¨:

1Ô∏è‚É£ –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ë–ò–ó-–î–ï–õ –í –ö–í–ï–°–¢–´
–¢—ã –ø–∏—à–µ—à—å: "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É" 
–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç: "–ú–∏—Å—Å–∏—è: –î–æ–≥–æ–≤–æ—Ä–∏ –∏ –≤—ã–∂–∏–≤–∏"

2Ô∏è‚É£ –†–ï–ñ–ò–ú–´ –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –ë–ï–ó–£–ú–ò–Ø
üíº –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π ‚Äî —Å–æ–≤–µ—â–∞–Ω–∏—è, –≥–¥–µ –Ω–∏–∫—Ç–æ –Ω–µ —á–∏—Ç–∞–ª –ø–æ–≤–µ—Å—Ç–∫—É
üöÄ –°—Ç–∞—Ä—Ç–∞–ø ‚Äî MVP –∏–∑ –∫–æ–¥–∞, –∫–æ—Ñ–µ –∏ —Å–∞–º–æ–æ–±–º–∞–Ω–∞
‚öîÔ∏è –ë–∏—Ç–≤–∞ –æ—Ç–¥–µ–ª–æ–≤ ‚Äî –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å —Å —Ç—Ä–µ–º—è –≤—Ä–∞–≥–∞–º–∏

3Ô∏è‚É£ –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ú–ò–°–°–ò–ò
"–ü—Ä–æ–¥–∞–π –º–µ—á—Ç—É, –Ω–µ –ø–æ—Ç–µ—Ä—è–≤ —Å–æ–≤–µ—Å—Ç—å"
"–í—ã—Å–ª—É—à–∞–π –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π '—Ç–æ–ª—å–∫–æ —Å–ø—Ä–æ—Å–∏—Ç—å'"

4Ô∏è‚É£ –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
‚ú® "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–∞–Ω–∏–∫–∏"
‚ú® "–ú–∞—Å—Ç–µ—Ä —Ö–æ–ª–æ–¥–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"
‚ú® "–°–≤—è—Ç–æ–π —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤"

5Ô∏è‚É£ –ë–ò–ó–ù–ï–°-–°–¢–ê–¢–ò–°–¢–ò–ö–ê
üìä –ò–Ω–¥–µ–∫—Å –≤—ã–≥–æ—Ä–∞–Ω–∏—è
üìä –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ä–∫–∞–∑–º–∞
üìä –®–∞–Ω—Å –¥–æ–∂–∏—Ç—å –¥–æ IPO

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:
–£—Ä–æ–≤–µ–Ω—å: 1 | XP: 0/300
–°—Ç–∞—Ç—É—Å: –ù–∞–∏–≤–Ω—ã–π –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å üíÄ

‚û°Ô∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏ /addtask`;


  await ctx.reply(welcomeMessage, getMainMenuKeyboard());
});

/**
 * /addtask - –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç
 */
bot.command('addtask', async (ctx) => {
  const userId = ctx.from.id;
  const taskDescription = ctx.message.text.replace('/addtask ', '').trim();

  if (!taskDescription) {
    await ctx.reply('üìù –ù–∞–ø–∏—à–∏: /addtask –û–ø–∏—Å–∞–Ω–∏–µ\n\n–ü—Ä–∏–º–µ—Ä: /addtask –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ', getMainMenuKeyboard());
    return;
  }

  const waitMsg = await ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—é–∂–µ—Ç... üñ§');
  const quest = await createQuest(userId, taskDescription);

  if (!quest) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.', getMainMenuKeyboard());
    return;
  }

  const questMessage = `‚úÖ –ö–í–ï–°–¢ #${quest.questNumber} –°–û–ó–î–ê–ù!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù ${quest.title}

"${quest.story}"

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéÅ –ù–ê–ì–†–ê–î–ê: +${quest.xp} XP
‚è±Ô∏è –°–¢–ê–¢–£–°: –ê–∫—Ç–∏–≤–µ–Ω`;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!', `done_${quest.id}`)],
    ...getMainMenuKeyboard().reply_markup.inline_keyboard,
  ]);

  await ctx.reply(questMessage, keyboard);
  try { await ctx.deleteMessage(waitMsg.message_id); } catch (e) {}
});

/**
 * /quests - –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
 */
bot.command('quests', async (ctx) => {
  const userId = ctx.from.id;
  const quests = await getActiveQuests(userId);

  if (quests.length === 0) {
    await ctx.reply('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!\n\n–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π: /addtask –æ–ø–∏—Å–∞–Ω–∏–µ', getMainMenuKeyboard());
    return;
  }

  let message = `üìã –ê–ö–¢–ò–í–ù–´–ï –ö–í–ï–°–¢–´ (${quests.length})\n`;
  message += `${'‚îÅ'.repeat(40)}\n\n`;

  for (const quest of quests) {
    const difficulty = '‚≠ê'.repeat(Math.min(Math.floor(quest.xp / 20), 5));
    message += `#${quest.questNumber} üíÄ ${quest.title}\n`;
    message += `"${quest.story.substring(0, 80)}..."\n`;
    message += `${difficulty} +${quest.xp} XP\n`;
    message += `[‚úÖ #${quest.questNumber}] [üóëÔ∏è #${quest.questNumber}]\n\n`;
  }

  message += `${'‚îÅ'.repeat(40)}`;

  const buttons = quests.map((quest) => [
    Markup.button.callback(`‚úÖ #${quest.questNumber}`, `done_${quest.id}`),
    Markup.button.callback(`üóëÔ∏è #${quest.questNumber}`, `delete_${quest.id}`),
  ]);

  const keyboard = Markup.inlineKeyboard([
    ...buttons,
    ...getMainMenuKeyboard().reply_markup.inline_keyboard,
  ]);

  await ctx.reply(message, keyboard);
});

/**
 * /today - –ö–≤–µ—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
 */
bot.command('today', async (ctx) => {
  const userId = ctx.from.id;
  const todayQuests = await getTodayQuests(userId);

  if (todayQuests.length === 0) {
    await ctx.reply('üì≠ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∫–≤–µ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π: /addtask', getMainMenuKeyboard());
    return;
  }

  let message = `üìÖ –ö–í–ï–°–¢–´ –ù–ê –°–ï–ì–û–î–ù–Ø (${todayQuests.length})\n`;
  message += `${'‚îÅ'.repeat(40)}\n\n`;

  for (const quest of todayQuests) {
    const difficulty = '‚≠ê'.repeat(Math.min(Math.floor(quest.xp / 20), 5));
    message += `#${quest.questNumber} ${quest.title}\n`;
    message += `${difficulty} +${quest.xp} XP\n`;
    message += `"${quest.story.substring(0, 80)}..."\n\n`;
  }

  const buttons = todayQuests.map((quest) => [
    Markup.button.callback(`‚úÖ #${quest.questNumber}`, `done_${quest.id}`),
    Markup.button.callback(`üóëÔ∏è #${quest.questNumber}`, `delete_${quest.id}`),
  ]);

  const keyboard = Markup.inlineKeyboard([
    ...buttons,
    ...getMainMenuKeyboard().reply_markup.inline_keyboard,
  ]);

  await ctx.reply(message, keyboard);
});

/**
 * /profile
 */
bot.command('profile', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUser(userId);

  if (!user) {
    await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. /start', getMainMenuKeyboard());
    return;
  }

  const profileMessage = `üë§ –ü–†–û–§–ò–õ–¨: ${user.name}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä –û–°–ù–û–í–ù–´–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
–£—Ä–æ–≤–µ–Ω—å: ${user.level} ${'üíÄ'.repeat(Math.min(user.level, 5))}
–û–ø—ã—Ç: ${user.xp}/${user.level * 300} XP (${Math.round((user.xp % 300) / 3)}%)

üìà –ü–†–û–ì–†–ï–°–°
‚úÖ –í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤: ${user.totalQuestsCompleted}
üî• Streak: ${user.streak} –¥–Ω–µ–π

üèÜ –ë–ï–ô–î–ñ–ò: ${user.badges.join(', ')}

‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò
üé® –¢–µ–º–∞: ${user.theme}
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${user.settings.reminderTime}
üåç –Ø–∑—ã–∫: ${user.settings.language}`;

  await ctx.reply(profileMessage, getMainMenuKeyboard());
});

/**
 * /stats - –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–≤–µ—Å—Ç–∞–º–∏
 */
bot.command('stats', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUser(userId);
  const activeQuests = await getActiveQuests(userId);

  if (!user) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞', getMainMenuKeyboard());
    return;
  }

  let statsMessage = `üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ ${user.name}
–£—Ä–æ–≤–µ–Ω—å: ${user.level}
–í—Å–µ–≥–æ XP: ${user.xp}
–ö–≤–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.totalQuestsCompleted}

üéØ –°–ï–ô–ß–ê–° –í –†–ê–ë–û–¢–ï: ${activeQuests.length} –∫–≤–µ—Å—Ç–æ–≤`;

  if (activeQuests.length > 0 && activeQuests.length <= 5) {
    statsMessage += `\n${'‚îÄ'.repeat(40)}\n`;
    activeQuests.forEach((quest) => {
      statsMessage += `#${quest.questNumber} ${quest.title}\n`;
    });
  }

  statsMessage += `

${'‚îÅ'.repeat(40)}

üìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨: ${user.totalQuestsCompleted > 0 ? '95%' : '0%'}

üéØ –ê–ö–¢–ò–í–ù–û–°–¢–¨
–î–Ω–µ–π –≤ –∏–≥—Ä–µ: ${Math.floor((new Date() - user.createdAt.toDate()) / (1000 * 60 * 60 * 24))}
Streak: ${user.streak} –¥–Ω–µ–π

üí° –ë–æ–ª—å—à–µ –∫–≤–µ—Å—Ç–æ–≤ ‚Üí –±–æ–ª—å—à–µ XP ‚Üí –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π ‚Üí üñ§`;

  await ctx.reply(statsMessage, getMainMenuKeyboard());
});

/**
 * /help
 */

/**
 * /reminder_test - –¢–ï–°–¢–û–í–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø
 */
bot.command('reminder_test', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUser(userId);
  
  if (!user) {
    await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  await ctx.reply('üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...');
  logger.info(`üß™ –¢–ï–°–¢–û–í–ê–Ø –û–¢–ü–†–ê–í–ö–ê –¥–ª—è ${user.name}`);
  
  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
  const activeQuests = await getActiveQuests(userId);
  logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤: ${activeQuests?.length || 0}`);
  
  if (!activeQuests || activeQuests.length === 0) {
    await ctx.reply('‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π —Å–Ω–∞—á–∞–ª–∞ –∫–≤–µ—Å—Ç!');
    return;
  }
  
  try {
    const timezone = user.settings?.timezone || 'Europe/Moscow';
    const userNow = moment().tz(timezone);
    const userCurrentTime = userNow.format('HH:mm');
    
    const reminderMessage = `üîî –¢–ï–°–¢–û–í–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ö–í–ï–°–¢–ê–•

‚è∞ –í—Ä–µ–º—è: ${userCurrentTime} (${timezone})
üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤: ${activeQuests.length}

–í–æ—Ç —á—Ç–æ –∂–¥—ë—Ç:
${activeQuests.slice(0, 3).map((q, i) => `${i + 1}. ${q.title}`).join('\n')}
${activeQuests.length > 3 ? `\n... –∏ –µ—â—ë ${activeQuests.length - 3}` : ''}

‚û°Ô∏è –î–∞–≤–∞–π, –≤—ã–ø–æ–ª–Ω—è—Ç—å! /quests`;
    
    await bot.telegram.sendMessage(userId, reminderMessage, getMainMenuKeyboard());
    await ctx.reply('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    logger.info(`‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${user.name}`);
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
  }
});


/**
 * /test - –ü–†–û–°–¢–û–ô –¢–ï–°–¢
 */
bot.command('test', async (ctx) => {
  logger.info('üß™ –ö–û–ú–ê–ù–î–ê /TEST –ü–û–õ–£–ß–ï–ù–ê!');
  
  try {
    logger.info('ü§ñ –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç...');
    await ctx.reply('‚úÖ –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢!');
    logger.info('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    logger.error('‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò:', error.message);
  }
});

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 */
bot.command('test_reminder', async (ctx) => {
  const userId = ctx.from.id;
  logger.info(`üß™ –ö–û–ú–ê–ù–î–ê /TEST_REMINDER –æ—Ç ${userId}`);
  
  try {
    // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeQuests = await getActiveQuests(userId);
    
    if (!activeQuests || activeQuests.length === 0) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      return;
    }
    
    // –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    const reminderMessage = `üîî –¢–ï–°–¢–û–í–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ö–í–ï–°–¢–ê–•

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}
üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤: ${activeQuests.length}

–í–æ—Ç —á—Ç–æ –∂–¥—ë—Ç:
${activeQuests.slice(0, 3).map((q, i) => `${i + 1}. ${q.title}`).join('\n')}
${activeQuests.length > 3 ? `\n... –∏ –µ—â—ë ${activeQuests.length - 3}` : ''}

‚û°Ô∏è –î–∞–≤–∞–π, –≤—ã–ø–æ–ª–Ω—è—Ç—å! /quests`;
    
    await ctx.reply(reminderMessage);
    logger.info(`‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${userId}`);
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error.message);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
  }
});

bot.command('help', async (ctx) => {
  const helpMessage = `‚ùì –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–í–ï–°–¢–ê–ú–ò:
/addtask [–æ–ø–∏—Å–∞–Ω–∏–µ] ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç
/quests ‚Äî –≤—Å–µ –∫–≤–µ—Å—Ç—ã
/today ‚Äî –∫–≤–µ—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è

üë§ –ü–†–û–§–ò–õ–¨ –ò –ü–†–û–ì–†–ï–°–°:
/profile ‚Äî –ø—Ä–æ—Ñ–∏–ª—å
/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
/test_reminder ‚Äî —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

üèÜ –û–ë–©–ï–°–¢–í–ï–ù–ù–û–ï:
/leaderboard ‚Äî –ª–∏–¥–µ—Ä–±–æ—Ä–¥

üí° –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢:
1. /addtask + –æ–ø–∏—Å–∞–Ω–∏–µ
2. ChatGPT –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –≤ –∫–≤–µ—Å—Ç
3. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Üí –≥–æ—Ç–æ–≤–æ!
4. +XP –∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!`;

  await ctx.reply(helpMessage, getMainMenuKeyboard());
});

/**
 * /leaderboard
 */
bot.command('leaderboard', async (ctx) => {
  try {
    const snapshot = await db.collection('users').orderBy('xp', 'desc').limit(10).get();

    let message = 'üèÜ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –õ–ò–î–ï–†–ë–û–†–î –°–¢–†–ê–î–ê–ù–ò–ô\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
    const medals = ['ü•á', 'ü•à', 'ü•â'];
    let position = 1;

    snapshot.forEach((doc) => {
      const user = doc.data();
      const medal = medals[position - 1] || `${position}.`;
      message += `${medal} ${user.name.substring(0, 15)} | –£—Ä. ${user.level} | ${user.xp} XP\n`;
      position++;
    });

    message += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n–≠—Ç–æ –±–æ–ª—å, –æ–±–ª–∞—á–µ–Ω–Ω–∞—è –≤ XP.`;
    await ctx.reply(message, getMainMenuKeyboard());
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞', getMainMenuKeyboard());
  }
});

/**
 * /feedback
 */
bot.command('feedback', async (ctx) => {
  const userId = ctx.from.id;
  const feedback = ctx.message.text.replace('/feedback ', '').trim();

  if (!feedback) {
    await ctx.reply('üí¨ /feedback –¢–≤–æ–π —Ç–µ–∫—Å—Ç', getMainMenuKeyboard());
    return;
  }

  try {
    await db.collection('feedback').add({
      userId: userId.toString(),
      text: feedback,
      timestamp: new Date(),
    });
    await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! üôè', getMainMenuKeyboard());
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ feedback:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞', getMainMenuKeyboard());
  }
});

// ==================== INLINE –ö–ù–û–ü–ö–ò ====================

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–≤–µ—Å—Ç
 */
bot.action(/done_(.+)/, async (ctx) => {
  const questId = ctx.match[1];
  const userId = ctx.from.id;
  const result = await completeQuest(userId, questId);

  if (!result.success) {
    await ctx.answerCbQuery(`‚ùå ${result.error}`, true);
    return;
  }

  const streakEmoji = result.newStreak >= 7 ? 'üî•' : result.newStreak >= 3 ? '‚ö°' : '‚ú®';

  const completeText = `üéâ –ö–í–ï–°–¢ #${result.questNumber} –í–´–ü–û–õ–ù–ï–ù!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìú ${result.questTitle}
"–¢—ã –ø–µ—Ä–µ–∂–∏–ª —ç—Ç–æ. –≠—Ç–æ –≤—Å–µ, —á—Ç–æ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è."

‚ú® +${result.xpGained} XP –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ!

üìä –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${result.newLevel}
   –û–ø—ã—Ç: ${result.newXp} XP

${streakEmoji} Streak: ${result.newStreak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!`;

  await ctx.editMessageText(completeText);
  await ctx.answerCbQuery('‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!');
});

/**
 * –£–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç
 */
bot.action(/delete_(.+)/, async (ctx) => {
  const questId = ctx.match[1];
  const userId = ctx.from.id;

  try {
    const questRef = db.collection('quests').doc(questId);
    const questDoc = await questRef.get();

    if (!questDoc.exists) {
      await ctx.answerCbQuery('‚ùå –ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const quest = questDoc.data();
    if (quest.userId !== userId.toString()) {
      await ctx.answerCbQuery('‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–π –∫–≤–µ—Å—Ç!');
      return;
    }

    await questRef.delete();
    const deletedText = `‚ùå –ö–≤–µ—Å—Ç "#${quest.questNumber}" "${quest.title}" —É–¥–∞–ª—ë–Ω`;
    await ctx.editMessageText(deletedText);
    await ctx.answerCbQuery('‚úÖ –£–¥–∞–ª–µ–Ω–æ');
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

/**
 * –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é - –í–´–ü–û–õ–ù–Ø–Æ–¢ –õ–û–ì–ò–ö–£
 */


bot.action('menu_add', async (ctx) => {
  ctx.session = ctx.session || {};
  ctx.session.waitingForTask = true;
  await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n–ü—Ä–∏–º–µ—Ä: "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É"', 
    Markup.keyboard([['‚ùå –û—Ç–º–µ–Ω–∞']]).resize());
  await ctx.answerCbQuery();
});


bot.action('menu_quests', async (ctx) => {
  const userId = ctx.from.id;
  const quests = await getActiveQuests(userId);

  if (quests.length === 0) {
    await ctx.answerCbQuery('üì≠ –ù–µ—Ç –∫–≤–µ—Å—Ç–æ–≤', true);
    return;
  }

  let message = `üìã –ê–ö–¢–ò–í–ù–´–ï –ö–í–ï–°–¢–´ (${quests.length})\n`;
  message += `${'‚îÅ'.repeat(40)}\n\n`;

  for (const quest of quests) {
    const difficulty = '‚≠ê'.repeat(Math.min(Math.floor(quest.xp / 20), 5));
    message += `#${quest.questNumber} üíÄ ${quest.title}\n`;
    message += `"${quest.story.substring(0, 80)}..."\n`;
    message += `${difficulty} +${quest.xp} XP\n`;
    message += `[‚úÖ #${quest.questNumber}] [üóëÔ∏è #${quest.questNumber}]\n\n`;
  }

  message += `${'‚îÅ'.repeat(40)}`;

  const buttons = quests.map((quest) => [
    Markup.button.callback(`‚úÖ #${quest.questNumber}`, `done_${quest.id}`),
    Markup.button.callback(`üóëÔ∏è #${quest.questNumber}`, `delete_${quest.id}`),
  ]);

  const keyboard = Markup.inlineKeyboard([
    ...buttons,
    ...getMainMenuKeyboard().reply_markup.inline_keyboard,
  ]);

  await ctx.reply(message, keyboard);
  await ctx.answerCbQuery();
});

bot.action('menu_profile', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUser(userId);

  if (!user) {
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞', true);
    return;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const activityLog = user.activityLog || [];
  const lastWeek = activityLog.slice(-7).reverse();
  
  let historyText = '';
  if (lastWeek.length > 0) {
    historyText = '\nüìÖ –ò–°–¢–û–†–ò–Ø (7 –î–ù–ï–ô)\n';
    lastWeek.forEach(day => {
      historyText += `${day.date}: ${day.questsCompleted} –∫–≤–µ—Å—Ç–æ–≤ (+${day.xpGained} XP)\n`;
    });
  }

  const streakEmoji = user.streak >= 7 ? 'üî•' : user.streak >= 3 ? '‚ö°' : '‚ú®';

  const profileMessage = `üë§ –ü–†–û–§–ò–õ–¨: ${user.name}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä –û–°–ù–û–í–ù–´–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
–£—Ä–æ–≤–µ–Ω—å: ${user.level} ${'üíÄ'.repeat(Math.min(user.level, 5))}
–û–ø—ã—Ç: ${user.xp}/${user.level * 300} XP (${Math.round((user.xp % 300) / 3)}%)

üìà –ü–†–û–ì–†–ï–°–°
‚úÖ –í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤: ${user.totalQuestsCompleted}
${streakEmoji} Streak: ${user.streak} –¥–Ω–µ–π

üèÜ –ë–ï–ô–î–ñ–ò: ${user.badges.join(', ') || '–ï—â–µ –Ω–µ—Ç'}
${historyText}
‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò
üé® –¢–µ–º–∞: ${user.theme}
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${user.settings.reminderTime}
üåç –Ø–∑—ã–∫: ${user.settings.language}`;

  await ctx.reply(profileMessage, getMainMenuKeyboard());
  await ctx.answerCbQuery();
});

bot.action('menu_stats', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUser(userId);
  const activeQuests = await getActiveQuests(userId);

  if (!user) {
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞', true);
    return;
  }

  let statsMessage = `üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ ${user.name}
–£—Ä–æ–≤–µ–Ω—å: ${user.level}
–í—Å–µ–≥–æ XP: ${user.xp}
–ö–≤–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.totalQuestsCompleted}

üéØ –°–ï–ô–ß–ê–° –í –†–ê–ë–û–¢–ï: ${activeQuests.length} –∫–≤–µ—Å—Ç–æ–≤`;

  if (activeQuests.length > 0 && activeQuests.length <= 5) {
    statsMessage += `\n${'‚îÄ'.repeat(40)}\n`;
    activeQuests.forEach((quest) => {
      statsMessage += `#${quest.questNumber} ${quest.title}\n`;
    });
  }

  statsMessage += `

${'‚îÅ'.repeat(40)}

üìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨: ${user.totalQuestsCompleted > 0 ? '95%' : '0%'}

üéØ –ê–ö–¢–ò–í–ù–û–°–¢–¨
–î–Ω–µ–π –≤ –∏–≥—Ä–µ: ${Math.floor((new Date() - user.createdAt.toDate()) / (1000 * 60 * 60 * 24))}
Streak: ${user.streak} –¥–Ω–µ–π

üí° –ë–æ–ª—å—à–µ –∫–≤–µ—Å—Ç–æ–≤ ‚Üí –±–æ–ª—å—à–µ XP ‚Üí –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π ‚Üí üñ§`;

  await ctx.reply(statsMessage, getMainMenuKeyboard());
  await ctx.answerCbQuery();
});

/**
 * –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
bot.action('menu_settings', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUser(userId);

  if (!user) {
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞', true);
    return;
  }

  const settingsMessage = `‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –£–†–û–í–ù–Ø –ë–û–õ–ò
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üòÖ –£–†–û–í–ï–ù–¨ –ë–û–õ–ò
–¢–µ–∫—É—â–∏–π: ${user.theme === 'light' ? 'üòÖ –õ—ë–≥–∫–∏–π' : user.theme === 'black' ? 'üíÄ –ß—ë—Ä–Ω—ã–π —é–º–æ—Ä' : 'üî• –í–µ–Ω—á—É—Ä–Ω–æ–µ –¥–Ω–æ'}

–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ä–∫–∞–∑–º–∞ ‚Üì

üîî –í–†–ï–ú–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô
–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${user.settings.reminderTime}

–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è ‚Üì

üåç –ß–ê–°–û–í–û–ô –ü–û–Ø–°
–¢–µ–∫—É—â–∏–π: ${user.settings.timezone || 'Europe/Moscow'}

–í—ã–±–µ—Ä–∏ –ø–æ—è—Å ‚Üì`;

  const themeKeyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('üòÖ –õ—ë–≥–∫–∏–π', 'set_pain_light'),
      Markup.button.callback('üíÄ –ß—ë—Ä–Ω—ã–π', 'set_pain_black'),
    ],
    [Markup.button.callback('üî• –í–µ–Ω—á—É—Ä–Ω–æ–µ –¥–Ω–æ', 'set_pain_venture')],
    [
      Markup.button.callback('08:00', 'set_time_08'),
      Markup.button.callback('12:00', 'set_time_12'),
      Markup.button.callback('17:00', 'set_time_17'),
    ],
    [
      Markup.button.callback('19:00', 'set_time_19'),
      Markup.button.callback('21:00', 'set_time_21'),
      Markup.button.callback('23:00', 'set_time_23'),
    ],
    [
      Markup.button.callback('üåç –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞', 'select_timezone'),
    ],
    ...getMainMenuKeyboard().reply_markup.inline_keyboard,
  ]);

  await ctx.reply(settingsMessage, themeKeyboard);
  await ctx.answerCbQuery();
});


/**
 * –°–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –±–æ–ª–∏ - –õ—ë–≥–∫–∏–π
 */
bot.action('set_pain_light', async (ctx) => {
  const userId = ctx.from.id;
  try {
    await db.collection('users').doc(userId.toString()).update({ theme: 'light' });
    await ctx.answerCbQuery('‚úÖ –£—Ä–æ–≤–µ–Ω—å: üòÖ –õ—ë–≥–∫–∏–π', true);
    await ctx.reply('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ üòÖ –õ—ë–≥–∫–∏–π —é–º–æ—Ä!\n\n–¢–µ–ø–µ—Ä—å –∫–≤–µ—Å—Ç—ã –±—É–¥—É—Ç –≤–µ—Å–µ–ª–µ–µ –∏ –¥–æ–±—Ä–µ–µ üòÑ', getMainMenuKeyboard());
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞', true);
  }
});

/**
 * –°–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –±–æ–ª–∏ - –ß—ë—Ä–Ω—ã–π —é–º–æ—Ä
 */
bot.action('set_pain_black', async (ctx) => {
  const userId = ctx.from.id;
  try {
    await db.collection('users').doc(userId.toString()).update({ theme: 'black' });
    await ctx.answerCbQuery('‚úÖ –£—Ä–æ–≤–µ–Ω—å: üíÄ –ß—ë—Ä–Ω—ã–π —é–º–æ—Ä', true);
    await ctx.reply('‚úÖ –í–∫–ª—é—á–∏–ª—Å—è —Ä–µ–∂–∏–º üíÄ –ß—ë—Ä–Ω–æ–≥–æ —é–º–æ—Ä–∞!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å üñ§', getMainMenuKeyboard());
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞', true);
  }
});

/**
 * –°–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –±–æ–ª–∏ - –í–µ–Ω—á—É—Ä–Ω–æ–µ –¥–Ω–æ
 */
bot.action('set_pain_venture', async (ctx) => {
  const userId = ctx.from.id;
  try {
    await db.collection('users').doc(userId.toString()).update({ theme: 'venture' });
    await ctx.answerCbQuery('‚úÖ –£—Ä–æ–≤–µ–Ω—å: üî• –í–µ–Ω—á—É—Ä–Ω–æ–µ –¥–Ω–æ', true);
    await ctx.reply('‚úÖ –†–ï–ñ–ò–ú –ò–ù–í–ï–°–¢–û–†–ê –í–ö–õ–Æ–ß–ï–ù üî•\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–æ—Ä –ø–æ—Å–ª–µ –ø—Ä–æ–≤–∞–ª–∞ –ø–∏—Ç—á–∞.\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –±–µ—Å–ø–æ—â–∞–¥–Ω–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ üíÄ', getMainMenuKeyboard());
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞', true);
  }
});

/**
 * –°–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 */
const setReminderTime = (timeStr) => {
  return async (ctx) => {
    const userId = ctx.from.id;
    try {
      await db.collection('users').doc(userId.toString()).update({
        'settings.reminderTime': timeStr,
      });
      await ctx.answerCbQuery(`‚úÖ –í—Ä–µ–º—è: ${timeStr}`, true);
      await ctx.reply(`‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${timeStr}!`, getMainMenuKeyboard());
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞', true);
    }
  };
};

bot.action('set_time_08', setReminderTime('08:00'));
bot.action('set_time_12', setReminderTime('12:00'));
bot.action('set_time_17', setReminderTime('17:00'));
bot.action('set_time_19', setReminderTime('19:00'));
bot.action('set_time_21', setReminderTime('21:00'));
bot.action('set_time_23', setReminderTime('23:00'));


/**
 * –°–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
 */
const TIMEZONES = [
  'Europe/Moscow', 'Europe/London', 'Europe/Paris', 'Europe/Berlin',
  'America/New_York', 'America/Los_Angeles', 'Asia/Shanghai', 'Asia/Tokyo'
];
/**
 * –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
 */
bot.action('select_timezone', async (ctx) => {

  const tzKeyboard = Markup.inlineKeyboard(
    TIMEZONES.map(tz => [Markup.button.callback(tz, `tz_${tz}`)]),
    {
      columns: 2
    }
  );

  await ctx.reply('üåç –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:', tzKeyboard);
  await ctx.answerCbQuery();
});

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
 */
TIMEZONES.forEach(tz => {
  bot.action(`tz_${tz}`, async (ctx) => {
    const userId = ctx.from.id;
    try {
      await db.collection('users').doc(userId.toString()).update({
        'settings.timezone': tz,
      });
      await ctx.reply(`‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${tz}!`, getMainMenuKeyboard());
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ timezone:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞', getMainMenuKeyboard());
    }
    await ctx.answerCbQuery();
  });
});



bot.action('menu_help', async (ctx) => {
  const helpMessage = `‚ùì –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–í–ï–°–¢–ê–ú–ò:
/addtask [–æ–ø–∏—Å–∞–Ω–∏–µ] ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç
/quests ‚Äî –≤—Å–µ –∫–≤–µ—Å—Ç—ã
/today ‚Äî –∫–≤–µ—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è

üë§ –ü–†–û–§–ò–õ–¨ –ò –ü–†–û–ì–†–ï–°–°:
/profile ‚Äî –ø—Ä–æ—Ñ–∏–ª—å
/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üèÜ –û–ë–©–ï–°–¢–í–ï–ù–ù–û–ï:
/leaderboard ‚Äî –ª–∏–¥–µ—Ä–±–æ—Ä–¥

üí° –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢:
1. /addtask + –æ–ø–∏—Å–∞–Ω–∏–µ
2. ChatGPT –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –≤ –∫–≤–µ—Å—Ç
3. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Üí –≥–æ—Ç–æ–≤–æ!
4. +XP –∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!`;

  await ctx.reply(helpMessage, getMainMenuKeyboard());
  await ctx.answerCbQuery();
});

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

/**
 * –ù–∞ –≥–ª–∞–≤–Ω—É—é - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ü–∏—Ç–∞—Ç—É –¥–Ω—è
 */
bot.action('menu_home', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUser(userId);

  if (!user) {
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞', true);
    return;
  }

  const quote = await generateDailyQuote();
  const xpProgress = Math.round((user.xp % 300) / 3);

  const compactMessage = `üí¨ –¶–ò–¢–ê–¢–ê –î–ù–Ø:
"${quote}"

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:
–£—Ä–æ–≤–µ–Ω—å: ${user.level} | XP: ${user.xp}/${user.level * 300} (${xpProgress}%)
–°—Ç–∞—Ç—É—Å: ${user.name} üíÄ`;

  await ctx.reply(compactMessage, getMainMenuKeyboard());
  await ctx.answerCbQuery();
});



/**
 * –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
 */

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–∞–¥–∞—á–∏
 */
bot.hears('‚ùå –û—Ç–º–µ–Ω–∞', async (ctx) => {
  ctx.session = ctx.session || {};
  ctx.session.waitingForTask = false;
  await ctx.reply('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ', getMainMenuKeyboard());
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
 */
bot.on('text', async (ctx) => {
  ctx.session = ctx.session || {};
  
  // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
  if (ctx.session.waitingForTask) {
    const taskDescription = ctx.message.text;
    
    if (!taskDescription || taskDescription.length < 3) {
      await ctx.reply('‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
      return;
    }
    
    ctx.session.waitingForTask = false;
    
    const userId = ctx.from.id;
    const isNewUser = await createOrUpdateUser(userId, ctx.from);
    
    if (isNewUser) {
      await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–ò–ó–ù–ï–°-–°–ò–ú–£–õ–Ø–¢–û–† –í–´–ñ–ò–í–ê–ù–ò–Ø!\n\nüíº –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ç–≤–æ–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ—à–º–∞—Ä –≤ —á–µ—Ä–Ω—É—é –∫–æ–º–µ–¥–∏—é. KPI —Ç–µ–ø–µ—Ä—å –≤—Ä–∞–≥–∏, –¥–µ–¥–ª–∞–π–Ω—ã ‚Äî –±–æ—Å—Å—ã, –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã ‚Äî –±–æ–≥–∏.\n\nüéØ –ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å: –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!', getMainMenuKeyboard());
    }
    
    await ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–≤–µ—Å—Ç...', getMainMenuKeyboard());
    
    const quest = await createQuest(userId, taskDescription);
    if (!quest) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞', getMainMenuKeyboard());
      return;
    }
    
    const questMessage = `‚ú® –ù–û–í–´–ô –ö–í–ï–°–¢ #${quest.questNumber}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìú ${quest.title}

${quest.story}

‚≠ê +${quest.xp} XP –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ`;
    
    const questKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ! #${quest.questNumber}`, `done_${quest.id}`)],
      [Markup.button.callback(`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #${quest.questNumber}`, `delete_${quest.id}`)],
      ...getMainMenuKeyboard().reply_markup.inline_keyboard,
    ]);
    
    await ctx.reply(questMessage, questKeyboard);
    return;
  }
  
  // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  if (!ctx.message.text.startsWith('/')) {
    await ctx.reply(
      '‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /help',
      getMainMenuKeyboard()
    );
  }
});

/**
 * üèÜ LEADERBOARD - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
 */
async function showLeaderboard(ctx) {
  const userId = ctx.from.id;
  
  try {
    await ctx.answerCbQuery();
    
    const user = await getUser(userId);
    if (!user) {
      await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–≤–µ—Å—Ç!', getMainMenuKeyboard());
      return;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const usersSnapshot = await db.collection('users').get();
    const allUsers = [];
    
    usersSnapshot.forEach(doc => {
      const userData = doc.data();
      allUsers.push({
        userId: userData.userId,
        completed: userData.totalQuestsCompleted || 0,
        streak: userData.streak || 0,
      });
    });

    // –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–≤–µ—Å—Ç–∞–º
    allUsers.sort((a, b) => b.completed - a.completed);

    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPosition = allUsers.findIndex(u => u.userId === userId);
    const totalUsers = allUsers.length;
    const percentile = Math.round((1 - userPosition / totalUsers) * 100);

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const categories = {
      legend: allUsers.filter(u => u.completed >= 45),
      champion: allUsers.filter(u => u.completed >= 30 && u.completed < 45),
      star: allUsers.filter(u => u.completed >= 15 && u.completed < 30),
      rising: allUsers.filter(u => u.completed >= 5 && u.completed < 15),
    };

    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let categoryName = 'üåü –ù–æ–≤–∏—á–æ–∫';
    let categoryEmoji = '‚ú®';

    if (user.totalQuestsCompleted >= 45) {
      categoryName = 'ü•á –õ–ï–ì–ï–ù–î–ê';
      categoryEmoji = 'üëë';
    } else if (user.totalQuestsCompleted >= 30) {
      categoryName = 'ü•à –ß–ï–ú–ü–ò–û–ù';
      categoryEmoji = 'üèÜ';
    } else if (user.totalQuestsCompleted >= 15) {
      categoryName = 'ü•â –ó–í–ï–ó–î–ê';
      categoryEmoji = '‚≠ê';
    } else if (user.totalQuestsCompleted >= 5) {
      categoryName = 'üå† –í–û–°–•–û–î–Ø–©–ê–Ø';
      categoryEmoji = 'üí´';
    }

    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–≤–µ—Å—Ç–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const thresholds = [5, 15, 30, 45];
    let nextThreshold = thresholds.find(t => t > user.totalQuestsCompleted) || Infinity;
    const questsNeeded = nextThreshold === Infinity ? 0 : nextThreshold - user.totalQuestsCompleted;

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üèÜ LEADERBOARD
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

`;

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (categories.legend.length > 0) {
      message += `ü•á –õ–ï–ì–ï–ù–î–ê (1 –≥–µ—Ä–æ–π)\n`;
      message += `   üëë ${categories.legend[0].completed} –∫–≤–µ—Å—Ç–æ–≤\n`;
      message += `   üî• –°–µ—Ä–∏—è: ${categories.legend[0].streak} –¥–Ω–µ–π\n\n`;
    }

    if (categories.champion.length > 0) {
      message += `ü•à –ß–ï–ú–ü–ò–û–ù (${categories.champion.length > 10 ? '10+' : categories.champion.length})\n`;
      const top2 = categories.champion.slice(0, 2);
      top2.forEach(u => {
        message += `   üèÜ ${u.completed} –∫–≤–µ—Å—Ç–æ–≤ | üî• ${u.streak} –¥–Ω–µ–π\n`;
      });
      message += `\n`;
    }

    if (categories.star.length > 0) {
      message += `ü•â –ó–í–ï–ó–î–ê (${categories.star.length > 20 ? '20+' : categories.star.length})\n`;
      const top2 = categories.star.slice(0, 2);
      top2.forEach(u => {
        message += `   ‚≠ê ${u.completed} –∫–≤–µ—Å—Ç–æ–≤ | üî• ${u.streak} –¥–Ω–µ–π\n`;
      });
      message += `\n`;
    }

    if (categories.rising.length > 0) {
      message += `üå† –í–û–°–•–û–î–Ø–©–ê–Ø (${categories.rising.length > 30 ? '30+' : categories.rising.length})\n`;
      message += `   üí´ –ù–æ–≤–∏—á–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–ª–∞—Å—Å!\n\n`;
    }

    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message += `üë§ –¢–í–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï:\n`;
    message += `${categoryEmoji} ${categoryName}\n`;
    message += `‚úÖ ${user.totalQuestsCompleted} –∫–≤–µ—Å—Ç–æ–≤\n`;
    message += `üî• –°–µ—Ä–∏—è: ${user.streak || 0} –¥–Ω–µ–π\n\n`;

    message += `üìä –¢–û–ô –†–ï–ô–¢–ò–ù–ì:\n`;
    message += `üìà Top ${percentile}% –ª–∏–¥–µ—Ä–æ–≤\n`;

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (questsNeeded > 0) {
      const pluralForm = questsNeeded === 1 ? '–∫–≤–µ—Å—Ç–∞' : questsNeeded < 5 ? '–∫–≤–µ—Å—Ç–æ–≤' : '–∫–≤–µ—Å—Ç–æ–≤';
      message += `üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${questsNeeded} ${pluralForm}\n`;
    }

    message += `\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π! –¢—ã –ª–µ–≥–µ–Ω–¥–∞! üöÄ`;

    await ctx.reply(message, getMainMenuKeyboard());
    logger.info(`‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞', getMainMenuKeyboard());
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥" –≤ –º–µ–Ω—é
bot.action('menu_leaderboard', showLeaderboard);

// ==================== ERROR HANDLING ====================

bot.catch((err, ctx) => {
  logger.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  try {
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.', getMainMenuKeyboard());
  } catch (e) {
    logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏:', e);
  }
});

// ==================== –ó–ê–ü–£–°–ö ====================

const startBot = async () => {
  try {
    logger.info('‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ü–ï–†–ï–î bot.launch()
    logger.info('‚è≥ –ó–∞–ø—É—Å–∫–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
    startReminderScheduler();
    logger.info('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!');
    
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const me = await bot.telegram.getMe();
    logger.info(`üîó https://t.me/${me.username}`);
    logger.info('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    
    // bot.launch() –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è
    logger.info('‚è≥ –í—ã–∑—ã–≤–∞—é bot.launch()...');
    await bot.launch();
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    logger.error('‚ùå Stack:', error.stack);
    process.exit(1);
  }
};

logger.info('üî¥ –ì–õ–ê–í–ù–û–ï: –í—ã–∑—ã–≤–∞—é startBot()');
startBot();

process.on('SIGINT', () => {
  logger.info('üì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stop('SIGINT');
});

process.on('SIGTERM', () => {
  logger.info('üì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stop('SIGTERM');
});

module.exports = bot;
