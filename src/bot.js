/**
 * üñ§ –ü–û–í–°–ï–î–ù–ï–í–ù–´–ô –ö–í–ï–°–¢ - Telegram Bot
 * –î–ª—è —Ü–∏–Ω–∏—á–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–º–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–Ω–∞–≤–∏–¥—è—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É
 * 
 * –í–µ—Ä—Å–∏—è: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –í–ò–î–ù–û –í–ï–ó–î–ï —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
 */

const { Telegraf, session, Markup } = require('telegraf');
const dotenv = require('dotenv');
const winston = require('winston');
const admin = require('firebase-admin');
const axios = require('axios');

dotenv.config();

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const FIREBASE_CONFIG = {
  projectId: process.env.FIREBASE_PROJECT_ID,
  privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
};

// ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.Console({ format: winston.format.simple() }),
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});

// ==================== FIREBASE ====================

try {
  admin.initializeApp({
    credential: admin.credential.cert(FIREBASE_CONFIG),
  });
} catch (error) {
  logger.error('‚ùå –û—à–∏–±–∫–∞ Firebase:', error);
  process.exit(1);
}

const db = admin.firestore();
logger.info('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// ==================== TELEGRAM –ë–û–¢ ====================

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());
logger.info('ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// ==================== PROMPTS FOR CHATGPT ====================

const PROMPTS = {
  corporate: `–¢—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –±–∏–∑–Ω–µ—Å–º–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–Ω–∞–≤–∏–¥—è—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –≤ –∑–∞–±–∞–≤–Ω—ã–π –∫–≤–µ—Å—Ç —Å –ß–ï–†–ù–´–ú –Æ–ú–û–†–û–ú.
–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞, –±–µ–∑ –ø–æ–∑–∏—Ç–∏–≤–∞. –¶–∏–Ω–∏—á–Ω—ã–π, –æ—Å—Ç—Ä—ã–π, –Ω–µ–º–Ω–æ–≥–æ –∂–µ—Å—Ç–æ–∫–∏–π.

–ü–†–ê–í–ò–õ–ê:
1. –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (150 —Å–ª–æ–≤)
2. –ß–µ—Ä–Ω—ã–π —é–º–æ—Ä, —Å–∞—Ä–∫–∞–∑–º, —Ü–∏–Ω–∏–∑–º –ü–†–ò–í–ï–¢–°–¢–í–£–ï–¢–°–Ø
3. –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: deadline = —Å–º–µ—Ä—Ç—å, –æ—Ç—á–µ—Ç = –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞–∫—Ç–∞ –æ —Å–º–µ—Ä—Ç–∏
4. –¶–µ–ª–∏ ‚Üí –≤—Ä–∞–≥–∏ (–±–æ—Å—Å = –¥—Ä–∞–∫–æ–Ω, –∫–ª–∏–µ–Ω—Ç = —Ç–∏—Ä–∞–Ω, —Å–æ–≤–µ—â–∞–Ω–∏–µ = –∫–∞–∑–Ω—å)
5. –ù–ï –≤–∫–ª—é—á–∞–π: —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞—Å–∏–ª–∏–µ, —Å–µ–∫—Å–∏–∑–º
6. –í–ö–õ–Æ–ß–ê–ô: —Ü–∏–Ω–∏—á–Ω–æ—Å—Ç—å, –º—Ä–∞–∫, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å

–ó–ê–î–ê–ß–ê: {TASK}

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∫–≤–µ—Å—Ç–∞, –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ß–µ—Ä–Ω—ã–π —é–º–æ—Ä.`,

  startup: `–¢—ã –º–∞—Å—Ç–µ—Ä –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –≤—ã—à–ª–∏ –≤ –±–æ–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –±–µ–∑ –∑–∞—â–∏—Ç—ã –∏ –∑–∞—Ä–ø–ª–∞—Ç—ã.

–ó–ê–î–ê–ß–ê: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É —Å—Ç–∞—Ä—Ç–∞–ø–µ—Ä–∞ –≤ –∫–≤–µ—Å—Ç –ø—Ä–æ –≤—ã–∂–∏–≤–∞–Ω–∏–µ –≤ —É—Å–ª–æ–≤–∏—è—Ö —Ö–∞–æ—Å–∞ —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º.

–ü–†–ê–í–ò–õ–ê:
1. –Ø–∑—ã–∫: —Å—Ç–∞—Ä—Ç–∞–ø-–∫—É–ª—å—Ç—É—Ä–∞, –Ω–µ–¥–æ—Å—ã–ø–∞–Ω–∏–µ, –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å, pivots
2. –ß–µ—Ä–Ω—ã–π —é–º–æ—Ä –ø—Ä–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ–Ω–µ–≥, sleep deprivation
3. –í—Ä–∞–≥–∏: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã, –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã, –∫–æ–¥, —Å—Ä–æ–∫–∏, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–º
4. –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å: —ç—Ç–æ –±–æ–µ–≤–æ–π –ø—Ä–∏–∫–∞–∑

–ó–ê–î–ê–ß–ê: {TASK}

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∫–≤–µ—Å—Ç–∞.`,

  corporate_war: `–¢—ã —Å—Ç—Ä–∞—Ç–µ–≥ –¥—Ä–µ–≤–Ω–∏—Ö —Å—Ä–∞–∂–µ–Ω–∏–π –≤ –º–∏—Ä–µ –±–∏–∑–Ω–µ—Å–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—â–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±—Ä–æ—Å–∫—É –≤ —Å–ø–∏–Ω—É.

–ó–ê–î–ê–ß–ê: –û–ø–∏—Å–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Ö–æ–¥ –≤ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∏–≥—Ä–µ –ø–æ–ª–∏—Ç–∏–∫–∏.

–ü–†–ê–í–ò–õ–ê:
1. –Ø–∑—ã–∫: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –ø–æ–ª–∏—Ç–∏–∫–∞, –ø–æ–¥–≤–æ–¥–Ω—ã–µ —Ç–µ—á–µ–Ω–∏—è, —Ñ—Ä–∞–∫—Ü–∏–∏
2. –í—Ä–∞–≥–∏: –∫–æ–ª–ª–µ–≥–∏, –∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏–µ –æ—Ç–¥–µ–ª—ã, –≤–ª–∞—Å—Ç—å, –≤—Ä–µ–º—è
3. –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: –±–æ–ª—å—à–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –æ–ø–∞—Å–Ω–µ–µ
4. –ß–µ—Ä–Ω—ã–π —é–º–æ—Ä –ø—Ä–æ –±—é—Ä–æ–∫—Ä–∞—Ç–∏—é, –ø–æ–ª–∏—Ç–∏–∫—É

–ó–ê–î–ê–ß–ê: {TASK}

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∫–≤–µ—Å—Ç–∞.`,
};

// ==================== UTILITY FUNCTIONS ====================

async function getUser(userId) {
  try {
    const userDoc = await db.collection('users').doc(userId.toString()).get();
    return userDoc.exists ? userDoc.data() : null;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

async function createOrUpdateUser(userId, userData) {
  try {
    const userRef = db.collection('users').doc(userId.toString());
    const currentUser = await userRef.get();

    if (!currentUser.exists) {
      await userRef.set({
        userId,
        name: userData.first_name || '–ê–Ω–æ–Ω–∏–º',
        username: userData.username || `user_${userId}`,
        level: 1,
        xp: 0,
        totalQuestsCompleted: 0,
        badges: ['–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å'],
        theme: 'corporate',
        settings: { reminderTime: '19:00', language: 'ru', weeklyReportDay: 'sunday' },
        createdAt: new Date(),
        lastActiveAt: new Date(),
        streak: 0,
      });
      logger.info(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
      return true;
    } else {
      await userRef.update({ lastActiveAt: new Date() });
      return false;
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

async function generateQuestStory(taskDescription, theme = 'corporate') {
  try {
    const promptTemplate = PROMPTS[theme] || PROMPTS.corporate;
    const prompt = promptTemplate.replace('{TASK}', taskDescription);

    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: '–¢—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–≤–µ—Å—Ç–æ–≤ —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º.' },
          { role: 'user', content: prompt },
        ],
        max_tokens: 300,
        temperature: 0.8,
      },
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000,
      }
    );

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ ChatGPT:', error.message);
    return '–û–±–ª–∞–≥–æ—Ä–æ–¥—å —ç—Ç—É –∑–∞–¥–∞—á—É —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ —á–µ—Å—Ç–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —Å–ª–æ–≤ –∏ –º–∞–ª–æ —Å–º—ã—Å–ª–∞.';
  }
}

async function createQuest(userId, taskDescription) {
  try {
    const user = await getUser(userId);
    if (!user) return null;

    const story = await generateQuestStory(taskDescription, user.theme);
    const words = taskDescription.split(' ').length;
    let xp = 15;
    if (words < 5) xp = 10;
    else if (words > 20) xp = 30;

    const userQuestsSnapshot = await db.collection('quests').where('userId', '==', userId.toString()).get();
    const activeQuests = userQuestsSnapshot.docs.filter(doc => !doc.data().completed);
    const questNumber = activeQuests.length + 1;

    const questId = `quest_${userId}_${Date.now()}`;
    await db.collection('quests').doc(questId).set({
      questId, userId: userId.toString(), questNumber, title: taskDescription,
      story, xp, completed: false, theme: user.theme, createdAt: new Date(), completedAt: null,
    });

    logger.info(`‚úÖ –ö–≤–µ—Å—Ç #${questNumber} —Å–æ–∑–¥–∞–Ω: ${questId}`);
    return { id: questId, title: taskDescription, story, xp, questNumber };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
    return null;
  }
}

async function getActiveQuests(userId) {
  try {
    const snapshot = await db.collection('quests').where('userId', '==', userId.toString()).get();
    const quests = [];
    snapshot.forEach((doc) => {
      const quest = doc.data();
      if (!quest.completed) quests.push({ id: doc.id, ...quest });
    });
    quests.sort((a, b) => b.createdAt.toDate() - a.createdAt.toDate());
    return quests;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤:', error);
    return [];
  }
}

async function getTodayQuests(userId) {
  const allQuests = await getActiveQuests(userId);
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  return allQuests.filter(quest => {
    const createdDate = quest.createdAt.toDate();
    return createdDate >= today && createdDate < tomorrow;
  });
}

async function completeQuest(userId, questId) {
  try {
    const questRef = db.collection('quests').doc(questId);
    const questDoc = await questRef.get();

    if (!questDoc.exists) return { success: false, error: '–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' };

    const quest = questDoc.data();
    if (quest.userId !== userId.toString()) return { success: false, error: '–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –∫–≤–µ—Å—Ç!' };
    if (quest.completed) return { success: false, error: '–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω' };

    await questRef.update({ completed: true, completedAt: new Date() });

    const userRef = db.collection('users').doc(userId.toString());
    const userDoc = await userRef.get();
    const user = userDoc.data();

    const newXp = user.xp + quest.xp;
    const newLevel = Math.floor(newXp / 300) + 1;

    await userRef.update({
      xp: newXp, level: newLevel, totalQuestsCompleted: user.totalQuestsCompleted + 1,
      lastActiveAt: new Date(),
    });

    await db.collection('analytics').add({
      userId: userId.toString(), event: 'quest_completed', questId,
      xpGained: quest.xp, newLevel, timestamp: new Date(),
    });

    logger.info(`‚úÖ –ö–≤–µ—Å—Ç #${quest.questNumber} –≤—ã–ø–æ–ª–Ω–µ–Ω: ${questId}, XP: +${quest.xp}`);
    return {
      success: true, xpGained: quest.xp, newXp, newLevel,
      questNumber: quest.questNumber, questTitle: quest.title,
    };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
    return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' };
  }
}

/**
 * –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –° INLINE –ö–ù–û–ü–ö–ê–ú–ò
 */
function getMainMenuKeyboard() {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å', 'menu_add'),
      Markup.button.callback('üìã –ö–≤–µ—Å—Ç—ã', 'menu_quests'),
      Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'menu_profile'),
    ],
    [
      Markup.button.callback('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'menu_stats'),
      Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'menu_help'),
    ],
  ]);
}

// ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================

/**
 * /start
 */
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  await createOrUpdateUser(userId, ctx.from);

  const welcomeMessage = `üñ§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç"

–¢–≤–æ–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ–ø–∞—Å–Ω—É—é –∏–≥—Ä—É –≤—ã–∂–∏–≤–∞–Ω–∏—è. 
–ö–∞–∂–¥–∞—è —Å–∫—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —ç–ø–∏—á–µ—Å–∫–∏–º –∫–≤–µ—Å—Ç–æ–º. 
–ü–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ —é–º–æ—Ä–∞ —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–º—Ä—ë—à—å.

üìä –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:
–£—Ä–æ–≤–µ–Ω—å: 1 | XP: 0/300
–°—Ç–∞—Ç—É—Å: –ù–∞–∏–≤–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫ üíÄ

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏ /addtask`;

  await ctx.reply(welcomeMessage, getMainMenuKeyboard());
});

/**
 * /addtask - –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç
 */
bot.command('addtask', async (ctx) => {
  const userId = ctx.from.id;
  const taskDescription = ctx.message.text.replace('/addtask ', '').trim();

  if (!taskDescription) {
    await ctx.reply('üìù –ù–∞–ø–∏—à–∏: /addtask –û–ø–∏—Å–∞–Ω–∏–µ\n\n–ü—Ä–∏–º–µ—Ä: /addtask –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ', getMainMenuKeyboard());
    return;
  }

  const waitMsg = await ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—é–∂–µ—Ç... üñ§');
  const quest = await createQuest(userId, taskDescription);

  if (!quest) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.', getMainMenuKeyboard());
    return;
  }

  const questMessage = `‚úÖ –ö–í–ï–°–¢ #${quest.questNumber} –°–û–ó–î–ê–ù!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù ${quest.title}

"${quest.story}"

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéÅ –ù–ê–ì–†–ê–î–ê: +${quest.xp} XP
‚è±Ô∏è –°–¢–ê–¢–£–°: –ê–∫—Ç–∏–≤–µ–Ω`;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!', `done_${quest.id}`)],
    ...getMainMenuKeyboard().reply_markup.inline_keyboard,
  ]);

  await ctx.reply(questMessage, keyboard);
  try { await ctx.deleteMessage(waitMsg.message_id); } catch (e) {}
});

/**
 * /quests - –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
 */
bot.command('quests', async (ctx) => {
  const userId = ctx.from.id;
  const quests = await getActiveQuests(userId);

  if (quests.length === 0) {
    await ctx.reply('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!\n\n–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π: /addtask –æ–ø–∏—Å–∞–Ω–∏–µ', getMainMenuKeyboard());
    return;
  }

  let message = `üìã –¢–í–ò –ê–ö–¢–ò–í–ù–´–ï –ö–í–ï–°–¢–´ (${quests.length})\n`;
  message += `${'‚îÅ'.repeat(40)}\n\n`;

  for (const quest of quests) {
    const difficulty = '‚≠ê'.repeat(Math.min(Math.floor(quest.xp / 20), 5));
    message += `#${quest.questNumber} üíÄ ${quest.title}\n`;
    message += `"${quest.story.substring(0, 80)}..."\n`;
    message += `${difficulty} +${quest.xp} XP\n`;
    message += `[‚úÖ #${quest.questNumber}] [üóëÔ∏è #${quest.questNumber}]\n\n`;
  }

  message += `${'‚îÅ'.repeat(40)}`;

  const buttons = quests.map((quest) => [
    Markup.button.callback(`‚úÖ #${quest.questNumber}`, `done_${quest.id}`),
    Markup.button.callback(`üóëÔ∏è #${quest.questNumber}`, `delete_${quest.id}`),
  ]);

  const keyboard = Markup.inlineKeyboard([
    ...buttons,
    ...getMainMenuKeyboard().reply_markup.inline_keyboard,
  ]);

  await ctx.reply(message, keyboard);
});

/**
 * /today - –ö–≤–µ—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
 */
bot.command('today', async (ctx) => {
  const userId = ctx.from.id;
  const todayQuests = await getTodayQuests(userId);

  if (todayQuests.length === 0) {
    await ctx.reply('üì≠ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∫–≤–µ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π: /addtask', getMainMenuKeyboard());
    return;
  }

  let message = `üìÖ –ö–í–ï–°–¢–´ –ù–ê –°–ï–ì–û–î–ù–Ø (${todayQuests.length})\n`;
  message += `${'‚îÅ'.repeat(40)}\n\n`;

  for (const quest of todayQuests) {
    const difficulty = '‚≠ê'.repeat(Math.min(Math.floor(quest.xp / 20), 5));
    message += `#${quest.questNumber} ${quest.title}\n`;
    message += `${difficulty} +${quest.xp} XP\n`;
    message += `"${quest.story.substring(0, 80)}..."\n\n`;
  }

  const buttons = todayQuests.map((quest) => [
    Markup.button.callback(`‚úÖ #${quest.questNumber}`, `done_${quest.id}`),
    Markup.button.callback(`üóëÔ∏è #${quest.questNumber}`, `delete_${quest.id}`),
  ]);

  const keyboard = Markup.inlineKeyboard([
    ...buttons,
    ...getMainMenuKeyboard().reply_markup.inline_keyboard,
  ]);

  await ctx.reply(message, keyboard);
});

/**
 * /profile
 */
bot.command('profile', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUser(userId);

  if (!user) {
    await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. /start', getMainMenuKeyboard());
    return;
  }

  const profileMessage = `üë§ –ü–†–û–§–ò–õ–¨: ${user.name}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä –û–°–ù–û–í–ù–´–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
–£—Ä–æ–≤–µ–Ω—å: ${user.level} ${'üíÄ'.repeat(Math.min(user.level, 5))}
–û–ø—ã—Ç: ${user.xp}/${user.level * 300} XP (${Math.round((user.xp % 300) / 3)}%)

üìà –ü–†–û–ì–†–ï–°–°
‚úÖ –í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤: ${user.totalQuestsCompleted}
üî• Streak: ${user.streak} –¥–Ω–µ–π

üèÜ –ë–ï–ô–î–ñ–ò: ${user.badges.join(', ')}

‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò
üé® –¢–µ–º–∞: ${user.theme}
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${user.settings.reminderTime}
üåç –Ø–∑—ã–∫: ${user.settings.language}`;

  await ctx.reply(profileMessage, getMainMenuKeyboard());
});

/**
 * /stats - –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–≤–µ—Å—Ç–∞–º–∏
 */
bot.command('stats', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUser(userId);
  const activeQuests = await getActiveQuests(userId);

  if (!user) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞', getMainMenuKeyboard());
    return;
  }

  let statsMessage = `üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ ${user.name}
–£—Ä–æ–≤–µ–Ω—å: ${user.level}
–í—Å–µ–≥–æ XP: ${user.xp}
–ö–≤–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.totalQuestsCompleted}

üéØ –°–ï–ô–ß–ê–° –í –†–ê–ë–û–¢–ï: ${activeQuests.length} –∫–≤–µ—Å—Ç–æ–≤`;

  if (activeQuests.length > 0 && activeQuests.length <= 5) {
    statsMessage += `\n${'‚îÄ'.repeat(40)}\n`;
    activeQuests.forEach((quest) => {
      statsMessage += `#${quest.questNumber} ${quest.title}\n`;
    });
  }

  statsMessage += `

${'‚îÅ'.repeat(40)}

üìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨: ${user.totalQuestsCompleted > 0 ? '95%' : '0%'}

üéØ –ê–ö–¢–ò–í–ù–û–°–¢–¨
–î–Ω–µ–π –≤ –∏–≥—Ä–µ: ${Math.floor((new Date() - user.createdAt.toDate()) / (1000 * 60 * 60 * 24))}
Streak: ${user.streak} –¥–Ω–µ–π

üí° –ë–æ–ª—å—à–µ –∫–≤–µ—Å—Ç–æ–≤ ‚Üí –±–æ–ª—å—à–µ XP ‚Üí –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π ‚Üí üñ§`;

  await ctx.reply(statsMessage, getMainMenuKeyboard());
});

/**
 * /help
 */
bot.command('help', async (ctx) => {
  const helpMessage = `‚ùì –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–í–ï–°–¢–ê–ú–ò:
/addtask [–æ–ø–∏—Å–∞–Ω–∏–µ] ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç
/quests ‚Äî –≤—Å–µ –∫–≤–µ—Å—Ç—ã
/today ‚Äî –∫–≤–µ—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è

üë§ –ü–†–û–§–ò–õ–¨ –ò –ü–†–û–ì–†–ï–°–°:
/profile ‚Äî –ø—Ä–æ—Ñ–∏–ª—å
/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üèÜ –û–ë–©–ï–°–¢–í–ï–ù–ù–û–ï:
/leaderboard ‚Äî –ª–∏–¥–µ—Ä–±–æ—Ä–¥

üí° –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢:
1. /addtask + –æ–ø–∏—Å–∞–Ω–∏–µ
2. ChatGPT –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –≤ –∫–≤–µ—Å—Ç
3. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Üí –≥–æ—Ç–æ–≤–æ!
4. +XP –∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!`;

  await ctx.reply(helpMessage, getMainMenuKeyboard());
});

/**
 * /leaderboard
 */
bot.command('leaderboard', async (ctx) => {
  try {
    const snapshot = await db.collection('users').orderBy('xp', 'desc').limit(10).get();

    let message = 'üèÜ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –õ–ò–î–ï–†–ë–û–†–î –°–¢–†–ê–î–ê–ù–ò–ô\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
    const medals = ['ü•á', 'ü•à', 'ü•â'];
    let position = 1;

    snapshot.forEach((doc) => {
      const user = doc.data();
      const medal = medals[position - 1] || `${position}.`;
      message += `${medal} ${user.name.substring(0, 15)} | –£—Ä. ${user.level} | ${user.xp} XP\n`;
      position++;
    });

    message += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n–≠—Ç–æ –±–æ–ª—å, –æ–±–ª–∞—á–µ–Ω–Ω–∞—è –≤ XP.`;
    await ctx.reply(message, getMainMenuKeyboard());
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞', getMainMenuKeyboard());
  }
});

/**
 * /feedback
 */
bot.command('feedback', async (ctx) => {
  const userId = ctx.from.id;
  const feedback = ctx.message.text.replace('/feedback ', '').trim();

  if (!feedback) {
    await ctx.reply('üí¨ /feedback –¢–≤–æ–π —Ç–µ–∫—Å—Ç', getMainMenuKeyboard());
    return;
  }

  try {
    await db.collection('feedback').add({
      userId: userId.toString(),
      text: feedback,
      timestamp: new Date(),
    });
    await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! üôè', getMainMenuKeyboard());
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ feedback:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞', getMainMenuKeyboard());
  }
});

// ==================== INLINE –ö–ù–û–ü–ö–ò ====================

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–≤–µ—Å—Ç
 */
bot.action(/done_(.+)/, async (ctx) => {
  const questId = ctx.match[1];
  const userId = ctx.from.id;
  const result = await completeQuest(userId, questId);

  if (!result.success) {
    await ctx.answerCbQuery(`‚ùå ${result.error}`, true);
    return;
  }

  const completeText = `üéâ –ö–í–ï–°–¢ #${result.questNumber} –í–´–ü–û–õ–ù–ï–ù!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìú ${result.questTitle}
"–¢—ã –ø–µ—Ä–µ–∂–∏–ª —ç—Ç–æ. –≠—Ç–æ –≤—Å–µ, —á—Ç–æ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è."

‚ú® +${result.xpGained} XP –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ!

üìä –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${result.newLevel}
   –û–ø—ã—Ç: ${result.newXp} XP`;

  await ctx.editMessageText(completeText);
  await ctx.answerCbQuery('‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!');
});

/**
 * –£–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç
 */
bot.action(/delete_(.+)/, async (ctx) => {
  const questId = ctx.match[1];
  const userId = ctx.from.id;

  try {
    const questRef = db.collection('quests').doc(questId);
    const questDoc = await questRef.get();

    if (!questDoc.exists) {
      await ctx.answerCbQuery('‚ùå –ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const quest = questDoc.data();
    if (quest.userId !== userId.toString()) {
      await ctx.answerCbQuery('‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–π –∫–≤–µ—Å—Ç!');
      return;
    }

    await questRef.delete();
    const deletedText = `‚ùå –ö–≤–µ—Å—Ç "#${quest.questNumber}" "${quest.title}" —É–¥–∞–ª—ë–Ω`;
    await ctx.editMessageText(deletedText);
    await ctx.answerCbQuery('‚úÖ –£–¥–∞–ª–µ–Ω–æ');
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

/**
 * –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
 */
bot.action('menu_add', async (ctx) => {
  await ctx.reply('üìù –ù–∞–ø–∏—à–∏: /addtask –û–ø–∏—Å–∞–Ω–∏–µ\n\n–ü—Ä–∏–º–µ—Ä: /addtask –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –±–æ—Å—Å—É', getMainMenuKeyboard());
  await ctx.answerCbQuery();
});

bot.action('menu_quests', async (ctx) => {
  await bot.telegram.sendMessage(ctx.from.id, '/quests');
  await ctx.answerCbQuery();
});

bot.action('menu_profile', async (ctx) => {
  await bot.telegram.sendMessage(ctx.from.id, '/profile');
  await ctx.answerCbQuery();
});

bot.action('menu_stats', async (ctx) => {
  await bot.telegram.sendMessage(ctx.from.id, '/stats');
  await ctx.answerCbQuery();
});

bot.action('menu_help', async (ctx) => {
  await bot.telegram.sendMessage(ctx.from.id, '/help');
  await ctx.answerCbQuery();
});

/**
 * –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
 */
bot.on('text', async (ctx) => {
  if (!ctx.message.text.startsWith('/')) {
    await ctx.reply(
      '‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /help',
      getMainMenuKeyboard()
    );
  }
});

// ==================== ERROR HANDLING ====================

bot.catch((err, ctx) => {
  logger.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  try {
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.', getMainMenuKeyboard());
  } catch (e) {
    logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏:', e);
  }
});

// ==================== –ó–ê–ü–£–°–ö ====================

const startBot = async () => {
  try {
    await bot.launch();
    logger.info('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    logger.info(`üîó https://t.me/${(await bot.telegram.getMe()).username}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  }
};

startBot();

process.on('SIGINT', () => {
  logger.info('üì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stop('SIGINT');
});

process.on('SIGTERM', () => {
  logger.info('üì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stop('SIGTERM');
});

module.exports = bot;
